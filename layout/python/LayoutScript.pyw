# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_LayoutScript')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_LayoutScript')
    _LayoutScript = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_LayoutScript', [dirname(__file__)])
        except ImportError:
            import _LayoutScript
            return _LayoutScript
        try:
            _mod = imp.load_module('_LayoutScript', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _LayoutScript = swig_import_helper()
    del swig_import_helper
else:
    import _LayoutScript
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0


def unicoodeData(obj, char_size, len):
    return _LayoutScript.unicoodeData(obj, char_size, len)
unicoodeData = _LayoutScript.unicoodeData

def unicodeNew(len, maxchar, kind, data):
    return _LayoutScript.unicodeNew(len, maxchar, kind, data)
unicodeNew = _LayoutScript.unicodeNew

def unicodeWrite(kind, data, index, value):
    return _LayoutScript.unicodeWrite(kind, data, index, value)
unicodeWrite = _LayoutScript.unicodeWrite

def PyToQ_String(obj):
    return _LayoutScript.PyToQ_String(obj)
PyToQ_String = _LayoutScript.PyToQ_String

def QToPy_String(qstr):
    return _LayoutScript.QToPy_String(qstr)
QToPy_String = _LayoutScript.QToPy_String
class pointerInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pointerInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pointerInt, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _LayoutScript.new_pointerInt()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _LayoutScript.delete_pointerInt
    __del__ = lambda self: None

    def assign(self, value):
        return _LayoutScript.pointerInt_assign(self, value)

    def value(self):
        return _LayoutScript.pointerInt_value(self)

    def cast(self):
        return _LayoutScript.pointerInt_cast(self)
    if _newclass:
        frompointer = staticmethod(_LayoutScript.pointerInt_frompointer)
    else:
        frompointer = _LayoutScript.pointerInt_frompointer
pointerInt_swigregister = _LayoutScript.pointerInt_swigregister
pointerInt_swigregister(pointerInt)

def pointerInt_frompointer(t):
    return _LayoutScript.pointerInt_frompointer(t)
pointerInt_frompointer = _LayoutScript.pointerInt_frompointer

class pointerDouble(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pointerDouble, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pointerDouble, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _LayoutScript.new_pointerDouble()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _LayoutScript.delete_pointerDouble
    __del__ = lambda self: None

    def assign(self, value):
        return _LayoutScript.pointerDouble_assign(self, value)

    def value(self):
        return _LayoutScript.pointerDouble_value(self)

    def cast(self):
        return _LayoutScript.pointerDouble_cast(self)
    if _newclass:
        frompointer = staticmethod(_LayoutScript.pointerDouble_frompointer)
    else:
        frompointer = _LayoutScript.pointerDouble_frompointer
pointerDouble_swigregister = _LayoutScript.pointerDouble_swigregister
pointerDouble_swigregister(pointerDouble)

def pointerDouble_frompointer(t):
    return _LayoutScript.pointerDouble_frompointer(t)
pointerDouble_frompointer = _LayoutScript.pointerDouble_frompointer

class backgroundModule(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, backgroundModule, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, backgroundModule, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def addBackground(self, filename):
        return _LayoutScript.backgroundModule_addBackground(self, filename)

    def backgroundOffset(self, handel, x, y):
        return _LayoutScript.backgroundModule_backgroundOffset(self, handel, x, y)

    def backgroundScale(self, handel, sx, sy):
        return _LayoutScript.backgroundModule_backgroundScale(self, handel, sx, sy)

    def backgroundShear(self, handel, sx, sy):
        return _LayoutScript.backgroundModule_backgroundShear(self, handel, sx, sy)

    def backgroundRotate(self, handel, angle):
        return _LayoutScript.backgroundModule_backgroundRotate(self, handel, angle)

    def backgroundName(self, handel, name):
        return _LayoutScript.backgroundModule_backgroundName(self, handel, name)

    def backgroundOffsetGetX(self, handel):
        return _LayoutScript.backgroundModule_backgroundOffsetGetX(self, handel)

    def backgroundOffsetGetY(self, handel):
        return _LayoutScript.backgroundModule_backgroundOffsetGetY(self, handel)

    def backgroundScaleGetX(self, handel):
        return _LayoutScript.backgroundModule_backgroundScaleGetX(self, handel)

    def backgroundScaleGetY(self, handel):
        return _LayoutScript.backgroundModule_backgroundScaleGetY(self, handel)

    def backgroundShearGetX(self, handel):
        return _LayoutScript.backgroundModule_backgroundShearGetX(self, handel)

    def backgroundShearGetY(self, handel):
        return _LayoutScript.backgroundModule_backgroundShearGetY(self, handel)

    def backgroundRotateGet(self, handel):
        return _LayoutScript.backgroundModule_backgroundRotateGet(self, handel)

    def backgroundTransparency(self, handel, value):
        return _LayoutScript.backgroundModule_backgroundTransparency(self, handel, value)

    def backgroundTransparencyGet(self, handel):
        return _LayoutScript.backgroundModule_backgroundTransparencyGet(self, handel)

    def clearBackground(self):
        return _LayoutScript.backgroundModule_clearBackground(self)

    def setShapeColor(self, red, green, blue):
        return _LayoutScript.backgroundModule_setShapeColor(self, red, green, blue)

    def setShapeColorRange(self, range):
        return _LayoutScript.backgroundModule_setShapeColorRange(self, range)

    def setBackgroundColor(self, red, green, blue):
        return _LayoutScript.backgroundModule_setBackgroundColor(self, red, green, blue)

    def setBackgroundColorRange(self, range):
        return _LayoutScript.backgroundModule_setBackgroundColorRange(self, range)

    def setIgnorePixel(self, ignore):
        return _LayoutScript.backgroundModule_setIgnorePixel(self, ignore)

    def centerView(self, handel):
        return _LayoutScript.backgroundModule_centerView(self, handel)

    def setThreshold(self, d):
        return _LayoutScript.backgroundModule_setThreshold(self, d)

    def setRisingThreshold(self, b):
        return _LayoutScript.backgroundModule_setRisingThreshold(self, b)

    def vectorizeThreshold(self, handel):
        return _LayoutScript.backgroundModule_vectorizeThreshold(self, handel)

    def hide(self, handel):
        return _LayoutScript.backgroundModule_hide(self, handel)

    def show(self, handel):
        return _LayoutScript.backgroundModule_show(self, handel)

    def showCell(self, handel, cell):
        return _LayoutScript.backgroundModule_showCell(self, handel, cell)

    def hideAll(self):
        return _LayoutScript.backgroundModule_hideAll(self)

    def showAll(self):
        return _LayoutScript.backgroundModule_showAll(self)

    def showAllCell(self, cell):
        return _LayoutScript.backgroundModule_showAllCell(self, cell)

    def setAnchor(self, handle, x, y):
        return _LayoutScript.backgroundModule_setAnchor(self, handle, x, y)

    def setAnchorCenter(self, handle):
        return _LayoutScript.backgroundModule_setAnchorCenter(self, handle)

    def setAnchorTopLeft(self, handle):
        return _LayoutScript.backgroundModule_setAnchorTopLeft(self, handle)

    def setImageAnchor(self, handle, x, y):
        return _LayoutScript.backgroundModule_setImageAnchor(self, handle, x, y)

    def vectorizePixel(self, handel):
        return _LayoutScript.backgroundModule_vectorizePixel(self, handel)
    __swig_destroy__ = _LayoutScript.delete_backgroundModule
    __del__ = lambda self: None
backgroundModule_swigregister = _LayoutScript.backgroundModule_swigregister
backgroundModule_swigregister(backgroundModule)

class barcodeModule(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, barcodeModule, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, barcodeModule, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_setmethods__["data"] = _LayoutScript.barcodeModule_data_set
    __swig_getmethods__["data"] = _LayoutScript.barcodeModule_data_get
    if _newclass:
        data = _swig_property(_LayoutScript.barcodeModule_data_get, _LayoutScript.barcodeModule_data_set)
    __swig_setmethods__["ratio"] = _LayoutScript.barcodeModule_ratio_set
    __swig_getmethods__["ratio"] = _LayoutScript.barcodeModule_ratio_get
    if _newclass:
        ratio = _swig_property(_LayoutScript.barcodeModule_ratio_get, _LayoutScript.barcodeModule_ratio_set)

    def addBarcode(self, arg2):
        return _LayoutScript.barcodeModule_addBarcode(self, arg2)

    def setCode39(self):
        return _LayoutScript.barcodeModule_setCode39(self)

    def setCode39Mod43(self):
        return _LayoutScript.barcodeModule_setCode39Mod43(self)

    def setCode128(self):
        return _LayoutScript.barcodeModule_setCode128(self)

    def setCode128A(self):
        return _LayoutScript.barcodeModule_setCode128A(self)

    def setCode128B(self):
        return _LayoutScript.barcodeModule_setCode128B(self)

    def setCode128C(self):
        return _LayoutScript.barcodeModule_setCode128C(self)

    def setDatamatrix(self):
        return _LayoutScript.barcodeModule_setDatamatrix(self)

    def setQrCode(self):
        return _LayoutScript.barcodeModule_setQrCode(self)

    def setMicroQrCode(self):
        return _LayoutScript.barcodeModule_setMicroQrCode(self)
    __swig_destroy__ = _LayoutScript.delete_barcodeModule
    __del__ = lambda self: None
barcodeModule_swigregister = _LayoutScript.barcodeModule_swigregister
barcodeModule_swigregister(barcodeModule)

class booleanHandler(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, booleanHandler, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, booleanHandler, name)
    __repr__ = _swig_repr

    def __init__(self, drawing):
        this = _LayoutScript.new_booleanHandler(drawing)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def mergeSelect(self, layer):
        return _LayoutScript.booleanHandler_mergeSelect(self, layer)

    def setA(self):
        return _LayoutScript.booleanHandler_setA(self)

    def setB(self):
        return _LayoutScript.booleanHandler_setB(self)

    def aPlusB(self):
        return _LayoutScript.booleanHandler_aPlusB(self)

    def aMinusB(self):
        return _LayoutScript.booleanHandler_aMinusB(self)

    def bMinusA(self):
        return _LayoutScript.booleanHandler_bMinusA(self)

    def aMultiB(self):
        return _LayoutScript.booleanHandler_aMultiB(self)

    def aExorB(self):
        return _LayoutScript.booleanHandler_aExorB(self)

    def aPlusBDel(self):
        return _LayoutScript.booleanHandler_aPlusBDel(self)

    def aMinusBDel(self):
        return _LayoutScript.booleanHandler_aMinusBDel(self)

    def bMinusADel(self):
        return _LayoutScript.booleanHandler_bMinusADel(self)

    def aMinusBDelA(self):
        return _LayoutScript.booleanHandler_aMinusBDelA(self)

    def aMinusBDelB(self):
        return _LayoutScript.booleanHandler_aMinusBDelB(self)

    def bMinusADelB(self):
        return _LayoutScript.booleanHandler_bMinusADelB(self)

    def bMinusADelA(self):
        return _LayoutScript.booleanHandler_bMinusADelA(self)

    def aMultiBDel(self):
        return _LayoutScript.booleanHandler_aMultiBDel(self)

    def aExorBDel(self):
        return _LayoutScript.booleanHandler_aExorBDel(self)

    def performAPlusB(self):
        return _LayoutScript.booleanHandler_performAPlusB(self)

    def performAMinusB(self):
        return _LayoutScript.booleanHandler_performAMinusB(self)

    def performBMinusA(self):
        return _LayoutScript.booleanHandler_performBMinusA(self)

    def performAMultiB(self):
        return _LayoutScript.booleanHandler_performAMultiB(self)

    def performAEorB(self):
        return _LayoutScript.booleanHandler_performAEorB(self)

    def getResultingPolygon(self):
        return _LayoutScript.booleanHandler_getResultingPolygon(self)

    def setResultToA(self):
        return _LayoutScript.booleanHandler_setResultToA(self)

    def setResultToB(self):
        return _LayoutScript.booleanHandler_setResultToB(self)

    def addLayerA(self, layer):
        return _LayoutScript.booleanHandler_addLayerA(self, layer)

    def addLayerB(self, layer):
        return _LayoutScript.booleanHandler_addLayerB(self, layer)

    def addA(self, *args):
        return _LayoutScript.booleanHandler_addA(self, *args)

    def addB(self, *args):
        return _LayoutScript.booleanHandler_addB(self, *args)

    def boolOnLayer(self, layerA, layerB, layerResult, operation, nx=0, ny=0, border=0):
        return _LayoutScript.booleanHandler_boolOnLayer(self, layerA, layerB, layerResult, operation, nx, ny, border)
    __swig_destroy__ = _LayoutScript.delete_booleanHandler
    __del__ = lambda self: None
booleanHandler_swigregister = _LayoutScript.booleanHandler_swigregister
booleanHandler_swigregister(booleanHandler)

class cell(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cell, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cell, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def addBox(self, *args):
        return _LayoutScript.cell_addBox(self, *args)

    def addCellref(self, c, pos):
        return _LayoutScript.cell_addCellref(self, c, pos)

    def addCellrefArray(self, *args):
        return _LayoutScript.cell_addCellrefArray(self, *args)

    def addChamferedBox(self, x, y, b, h, chamfer, layer):
        return _LayoutScript.cell_addChamferedBox(self, x, y, b, h, chamfer, layer)

    def addCircle(self, *args):
        return _LayoutScript.cell_addCircle(self, *args)

    def addCircleBox(self, p1, p2, layer):
        return _LayoutScript.cell_addCircleBox(self, p1, p2, layer)

    def addEllipse(self, layer, center, rx, ry):
        return _LayoutScript.cell_addEllipse(self, layer, center, rx, ry)

    def addPath(self, *args):
        return _LayoutScript.cell_addPath(self, *args)

    def addPolygon(self, points, layer):
        return _LayoutScript.cell_addPolygon(self, points, layer)

    def addPolygonArc(self, center, radiusInner, radiusOuter, angleStart, angleStop, layer):
        return _LayoutScript.cell_addPolygonArc(self, center, radiusInner, radiusOuter, angleStart, angleStop, layer)

    def addRoundedBox(self, x, y, b, h, radius, layer):
        return _LayoutScript.cell_addRoundedBox(self, x, y, b, h, radius, layer)

    def addSector(self, center, radius, angleStart, angleStop, layer):
        return _LayoutScript.cell_addSector(self, center, radius, angleStart, angleStop, layer)

    def addText(self, layer, pos, text):
        return _LayoutScript.cell_addText(self, layer, pos, text)

    def addCornerAreaSelect(self, value1, value2, angleInt):
        return _LayoutScript.cell_addCornerAreaSelect(self, value1, value2, angleInt)

    def areaLayer(self, layer):
        return _LayoutScript.cell_areaLayer(self, layer)

    def areaSelect(self):
        return _LayoutScript.cell_areaSelect(self)

    def areaSelected(self):
        return _LayoutScript.cell_areaSelected(self)

    def boxDeselect(self):
        return _LayoutScript.cell_boxDeselect(self)

    def boxSelectVisible(self):
        return _LayoutScript.cell_boxSelectVisible(self)

    def cDeselect(self, select):
        return _LayoutScript.cell_cDeselect(self, select)
    __swig_setmethods__["cellName"] = _LayoutScript.cell_cellName_set
    __swig_getmethods__["cellName"] = _LayoutScript.cell_cellName_get
    if _newclass:
        cellName = _swig_property(_LayoutScript.cell_cellName_get, _LayoutScript.cell_cellName_set)

    def chamferSelect(self, value, type, angleInt):
        return _LayoutScript.cell_chamferSelect(self, value, type, angleInt)

    def circumferenceSelect(self):
        return _LayoutScript.cell_circumferenceSelect(self)

    def circumferenceSelected(self):
        return _LayoutScript.cell_circumferenceSelected(self)

    def clearProperties(self):
        return _LayoutScript.cell_clearProperties(self)

    def closeToPolygon(self):
        return _LayoutScript.cell_closeToPolygon(self)

    def closeToPolygonSelect(self):
        return _LayoutScript.cell_closeToPolygonSelect(self)

    def compare(self, Cell):
        return _LayoutScript.cell_compare(self, Cell)

    def convertToPolygonIfClosed(self):
        return _LayoutScript.cell_convertToPolygonIfClosed(self)

    def convertToPolygonIfClosedSelect(self):
        return _LayoutScript.cell_convertToPolygonIfClosedSelect(self)

    def countSelectPoints(self):
        return _LayoutScript.cell_countSelectPoints(self)

    def countSelectPath(self):
        return _LayoutScript.cell_countSelectPath(self)

    def countSelectBox(self):
        return _LayoutScript.cell_countSelectBox(self)

    def countSelectPolygon(self):
        return _LayoutScript.cell_countSelectPolygon(self)

    def countSelectCellref(self):
        return _LayoutScript.cell_countSelectCellref(self)

    def countSelectCellrefarray(self):
        return _LayoutScript.cell_countSelectCellrefarray(self)

    def countSelectText(self):
        return _LayoutScript.cell_countSelectText(self)

    def copyCell(self, arg2):
        return _LayoutScript.cell_copyCell(self, arg2)

    def copySelect(self, *args):
        return _LayoutScript.cell_copySelect(self, *args)

    def cropWithSelection(self):
        return _LayoutScript.cell_cropWithSelection(self)

    def cropSharpAnglesSelect(self, i):
        return _LayoutScript.cell_cropSharpAnglesSelect(self, i)

    def cSelect(self, select):
        return _LayoutScript.cell_cSelect(self, select)

    def cutSelect(self, p1, p2):
        return _LayoutScript.cell_cutSelect(self, p1, p2)

    def deleteElement(self, e):
        return _LayoutScript.cell_deleteElement(self, e)

    def deleteLayer(self, layer):
        return _LayoutScript.cell_deleteLayer(self, layer)

    def deleteRefs(self, c):
        return _LayoutScript.cell_deleteRefs(self, c)

    def deleteSelect(self):
        return _LayoutScript.cell_deleteSelect(self)

    def depend(self, Cell):
        return _LayoutScript.cell_depend(self, Cell)

    def deselectAll(self):
        return _LayoutScript.cell_deselectAll(self)

    def deselectLabeledShapesOnLayer(self, layerText, label, layerShape=-1):
        return _LayoutScript.cell_deselectLabeledShapesOnLayer(self, layerText, label, layerShape)

    def deselectLayer(self, layer):
        return _LayoutScript.cell_deselectLayer(self, layer)

    def deselectNode(self, node):
        return _LayoutScript.cell_deselectNode(self, node)

    def deselectNodeOnLayer(self, node, layer):
        return _LayoutScript.cell_deselectNodeOnLayer(self, node, layer)

    def deselectShapeWithArea(self, min, max):
        return _LayoutScript.cell_deselectShapeWithArea(self, min, max)

    def deselectText(self, text, layer=-1):
        return _LayoutScript.cell_deselectText(self, text, layer)

    def edgeRemoveSelect(self, i):
        return _LayoutScript.cell_edgeRemoveSelect(self, i)

    def fAllDeselect(self, select):
        return _LayoutScript.cell_fAllDeselect(self, select)

    def fAllSelect(self, select):
        return _LayoutScript.cell_fAllSelect(self, select)

    def fDeselect(self, select):
        return _LayoutScript.cell_fDeselect(self, select)

    def fDeselectLayer(self, select, layer):
        return _LayoutScript.cell_fDeselectLayer(self, select, layer)

    def filletBezierSelect(self, value, type, angleInt):
        return _LayoutScript.cell_filletBezierSelect(self, value, type, angleInt)

    def filletRoundSelect(self, value, type, angleInt):
        return _LayoutScript.cell_filletRoundSelect(self, value, type, angleInt)
    __swig_setmethods__["firstElement"] = _LayoutScript.cell_firstElement_set
    __swig_getmethods__["firstElement"] = _LayoutScript.cell_firstElement_get
    if _newclass:
        firstElement = _swig_property(_LayoutScript.cell_firstElement_get, _LayoutScript.cell_firstElement_set)

    def flatSelect(self):
        return _LayoutScript.cell_flatSelect(self)

    def flatAllSelect(self):
        return _LayoutScript.cell_flatAllSelect(self)

    def flatCellref(self, e):
        return _LayoutScript.cell_flatCellref(self, e)

    def flatCellrefArray(self):
        return _LayoutScript.cell_flatCellrefArray(self)

    def flatLayer(self, layer):
        return _LayoutScript.cell_flatLayer(self, layer)

    def flatAllLayer(self, layer):
        return _LayoutScript.cell_flatAllLayer(self, layer)

    def fSelect(self, select):
        return _LayoutScript.cell_fSelect(self, select)

    def fSelectLayer(self, select, layer):
        return _LayoutScript.cell_fSelectLayer(self, select, layer)

    def fractureTriangleSelect(self, maxSize):
        return _LayoutScript.cell_fractureTriangleSelect(self, maxSize)

    def fractureBoxSelect(self, maxSize, l=None):
        return _LayoutScript.cell_fractureBoxSelect(self, maxSize, l)

    def fractureTrapezoidSelect(self, maxSize):
        return _LayoutScript.cell_fractureTrapezoidSelect(self, maxSize)

    def fractureLineSelect(self, lineSize, overlap=0, keepSmallShapes=False, deletedShapes=None, l=None):
        return _LayoutScript.cell_fractureLineSelect(self, lineSize, overlap, keepSmallShapes, deletedShapes, l)

    def getDensityLayer(self, *args):
        return _LayoutScript.cell_getDensityLayer(self, *args)

    def group(self, cell_):
        return _LayoutScript.cell_group(self, cell_)

    def groupStructure(self, cell_):
        return _LayoutScript.cell_groupStructure(self, cell_)

    def identical(self, Cell):
        return _LayoutScript.cell_identical(self, Cell)

    def incircleSelect(self, layer):
        return _LayoutScript.cell_incircleSelect(self, layer)

    def invertSelect(self):
        return _LayoutScript.cell_invertSelect(self)

    def mapLayer(self, t):
        return _LayoutScript.cell_mapLayer(self, t)

    def maximum(self, *args):
        return _LayoutScript.cell_maximum(self, *args)

    def maximumSelect(self, *args):
        return _LayoutScript.cell_maximumSelect(self, *args)

    def mergeSelect(self):
        return _LayoutScript.cell_mergeSelect(self)

    def measureSpaceVisible(self, p1):
        return _LayoutScript.cell_measureSpaceVisible(self, p1)

    def minkowskiSumSelect(self, pa):
        return _LayoutScript.cell_minkowskiSumSelect(self, pa)

    def minimum(self, *args):
        return _LayoutScript.cell_minimum(self, *args)

    def minimumSelect(self, *args):
        return _LayoutScript.cell_minimumSelect(self, *args)

    def mirrorSelect(self, p1, p2):
        return _LayoutScript.cell_mirrorSelect(self, p1, p2)

    def modifyCornersSelect(self, value1, value2):
        return _LayoutScript.cell_modifyCornersSelect(self, value1, value2)

    def move(self, pos):
        return _LayoutScript.cell_move(self, pos)

    def moveSelect(self, pos):
        return _LayoutScript.cell_moveSelect(self, pos)

    def moveToLayerSelect(self, layer):
        return _LayoutScript.cell_moveToLayerSelect(self, layer)

    def nearestElement(self, p):
        return _LayoutScript.cell_nearestElement(self, p)

    def pathDeselect(self):
        return _LayoutScript.cell_pathDeselect(self)

    def pathSelectVisible(self):
        return _LayoutScript.cell_pathSelectVisible(self)

    def pDeselect(self, select):
        return _LayoutScript.cell_pDeselect(self, select)

    def polygonDeselect(self):
        return _LayoutScript.cell_polygonDeselect(self)

    def polygonSelectVisible(self):
        return _LayoutScript.cell_polygonSelectVisible(self)

    def pointOnLayer(self, p, layer):
        return _LayoutScript.cell_pointOnLayer(self, p, layer)

    def pSelect(self, select):
        return _LayoutScript.cell_pSelect(self, select)

    def punchWithSelection(self):
        return _LayoutScript.cell_punchWithSelection(self)

    def relink(self, Cellold, Cellnew):
        return _LayoutScript.cell_relink(self, Cellold, Cellnew)

    def relinkSelect(self, Cellnew):
        return _LayoutScript.cell_relinkSelect(self, Cellnew)

    def replaceText(self, text1, text2):
        return _LayoutScript.cell_replaceText(self, text1, text2)

    def resize(self, scale):
        return _LayoutScript.cell_resize(self, scale)

    def rotateSelect(self, angle, pos):
        return _LayoutScript.cell_rotateSelect(self, angle, pos)

    def roundSelect(self, i):
        return _LayoutScript.cell_roundSelect(self, i)

    def scaleSelect(self, *args):
        return _LayoutScript.cell_scaleSelect(self, *args)

    def selectAll(self):
        return _LayoutScript.cell_selectAll(self)

    def selectCellref(self, cellname):
        return _LayoutScript.cell_selectCellref(self, cellname)

    def selectDatatype(self, i):
        return _LayoutScript.cell_selectDatatype(self, i)

    def selectedElement(self, e=None):
        return _LayoutScript.cell_selectedElement(self, e)

    def selectLabeledShapesOnLayer(self, layerText, label, layerShape=-1):
        return _LayoutScript.cell_selectLabeledShapesOnLayer(self, layerText, label, layerShape)

    def selectLayer(self, layer):
        return _LayoutScript.cell_selectLayer(self, layer)

    def selectNode(self, node):
        return _LayoutScript.cell_selectNode(self, node)

    def selectNodeOnLayer(self, node, layer):
        return _LayoutScript.cell_selectNodeOnLayer(self, node, layer)

    def selectShapeWithArea(self, min, max):
        return _LayoutScript.cell_selectShapeWithArea(self, min, max)

    def selectText(self, text, layer=-1):
        return _LayoutScript.cell_selectText(self, text, layer)

    def selectTouchingOrOverlapping(self, *args):
        return _LayoutScript.cell_selectTouchingOrOverlapping(self, *args)

    def selectVisible(self):
        return _LayoutScript.cell_selectVisible(self)

    def setCapSelect(self, w):
        return _LayoutScript.cell_setCapSelect(self, w)

    def setDatatypeSelect(self, i):
        return _LayoutScript.cell_setDatatypeSelect(self, i)

    def setWidthSelect(self, w):
        return _LayoutScript.cell_setWidthSelect(self, w)

    def sizeAdjustSelect(self, *args):
        return _LayoutScript.cell_sizeAdjustSelect(self, *args)

    def slotSelect(self, slotWidth, minSlotLength, maxSlotLength, edgeSpacing, minSlotspacing):
        return _LayoutScript.cell_slotSelect(self, slotWidth, minSlotLength, maxSlotLength, edgeSpacing, minSlotspacing)

    def snapShapeSelect(self, i):
        return _LayoutScript.cell_snapShapeSelect(self, i)

    def stripIdenticalElements(self):
        return _LayoutScript.cell_stripIdenticalElements(self)

    def swapLayer(self, i, k):
        return _LayoutScript.cell_swapLayer(self, i, k)

    def swapLayerSelect(self, i, k):
        return _LayoutScript.cell_swapLayerSelect(self, i, k)

    def textDeselect(self):
        return _LayoutScript.cell_textDeselect(self)

    def textSelectVisible(self):
        return _LayoutScript.cell_textSelectVisible(self)

    def textToPolygon(self, defaultWidth):
        return _LayoutScript.cell_textToPolygon(self, defaultWidth)

    def toBox(self):
        return _LayoutScript.cell_toBox(self)

    def toBoxSelect(self):
        return _LayoutScript.cell_toBoxSelect(self)

    def toCircleSelect(self):
        return _LayoutScript.cell_toCircleSelect(self)

    def toLines(self):
        return _LayoutScript.cell_toLines(self)

    def toLinesSelect(self):
        return _LayoutScript.cell_toLinesSelect(self)

    def toMeshSelect(self, width, spaceing):
        return _LayoutScript.cell_toMeshSelect(self, width, spaceing)

    def toPath(self):
        return _LayoutScript.cell_toPath(self)

    def toPathSelect(self):
        return _LayoutScript.cell_toPathSelect(self)

    def toPolygon(self):
        return _LayoutScript.cell_toPolygon(self)

    def toPolygonSelect(self):
        return _LayoutScript.cell_toPolygonSelect(self)

    def triangulateSelect(self, layer):
        return _LayoutScript.cell_triangulateSelect(self, layer)

    def useCell(self, Cell):
        return _LayoutScript.cell_useCell(self, Cell)

    def sizeadjustSelect(self, *args):
        return _LayoutScript.cell_sizeadjustSelect(self, *args)
    __swig_destroy__ = _LayoutScript.delete_cell
    __del__ = lambda self: None
cell_swigregister = _LayoutScript.cell_swigregister
cell_swigregister(cell)

class cell3d(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cell3d, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cell3d, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_setmethods__["firstElement"] = _LayoutScript.cell3d_firstElement_set
    __swig_getmethods__["firstElement"] = _LayoutScript.cell3d_firstElement_get
    if _newclass:
        firstElement = _swig_property(_LayoutScript.cell3d_firstElement_get, _LayoutScript.cell3d_firstElement_set)
    __swig_setmethods__["cellName"] = _LayoutScript.cell3d_cellName_set
    __swig_getmethods__["cellName"] = _LayoutScript.cell3d_cellName_get
    if _newclass:
        cellName = _swig_property(_LayoutScript.cell3d_cellName_get, _LayoutScript.cell3d_cellName_set)

    def selectCellref(self, cellname):
        return _LayoutScript.cell3d_selectCellref(self, cellname)

    def selectAll(self):
        return _LayoutScript.cell3d_selectAll(self)

    def invertSelect(self):
        return _LayoutScript.cell3d_invertSelect(self)

    def selectVisible(self):
        return _LayoutScript.cell3d_selectVisible(self)

    def deselectAll(self):
        return _LayoutScript.cell3d_deselectAll(self)

    def meshSelect(self):
        return _LayoutScript.cell3d_meshSelect(self)

    def meshDeselect(self):
        return _LayoutScript.cell3d_meshDeselect(self)
    __swig_destroy__ = _LayoutScript.delete_cell3d
    __del__ = lambda self: None
cell3d_swigregister = _LayoutScript.cell3d_swigregister
cell3d_swigregister(cell3d)

class cellList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cellList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cellList, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_setmethods__["nextCell"] = _LayoutScript.cellList_nextCell_set
    __swig_getmethods__["nextCell"] = _LayoutScript.cellList_nextCell_get
    if _newclass:
        nextCell = _swig_property(_LayoutScript.cellList_nextCell_get, _LayoutScript.cellList_nextCell_set)
    __swig_setmethods__["thisCell"] = _LayoutScript.cellList_thisCell_set
    __swig_getmethods__["thisCell"] = _LayoutScript.cellList_thisCell_get
    if _newclass:
        thisCell = _swig_property(_LayoutScript.cellList_thisCell_get, _LayoutScript.cellList_thisCell_set)
    __swig_destroy__ = _LayoutScript.delete_cellList
    __del__ = lambda self: None
cellList_swigregister = _LayoutScript.cellList_swigregister
cellList_swigregister(cellList)

class cellList3d(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cellList3d, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cellList3d, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_setmethods__["nextCell"] = _LayoutScript.cellList3d_nextCell_set
    __swig_getmethods__["nextCell"] = _LayoutScript.cellList3d_nextCell_get
    if _newclass:
        nextCell = _swig_property(_LayoutScript.cellList3d_nextCell_get, _LayoutScript.cellList3d_nextCell_set)
    __swig_setmethods__["thisCell"] = _LayoutScript.cellList3d_thisCell_set
    __swig_getmethods__["thisCell"] = _LayoutScript.cellList3d_thisCell_get
    if _newclass:
        thisCell = _swig_property(_LayoutScript.cellList3d_thisCell_get, _LayoutScript.cellList3d_thisCell_set)
    __swig_destroy__ = _LayoutScript.delete_cellList3d
    __del__ = lambda self: None
cellList3d_swigregister = _LayoutScript.cellList3d_swigregister
cellList3d_swigregister(cellList3d)

class component(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, component, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, component, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_setmethods__["description"] = _LayoutScript.component_description_set
    __swig_getmethods__["description"] = _LayoutScript.component_description_get
    if _newclass:
        description = _swig_property(_LayoutScript.component_description_get, _LayoutScript.component_description_set)
    __swig_setmethods__["label"] = _LayoutScript.component_label_set
    __swig_getmethods__["label"] = _LayoutScript.component_label_get
    if _newclass:
        label = _swig_property(_LayoutScript.component_label_get, _LayoutScript.component_label_set)
    __swig_setmethods__["prefix"] = _LayoutScript.component_prefix_set
    __swig_getmethods__["prefix"] = _LayoutScript.component_prefix_get
    if _newclass:
        prefix = _swig_property(_LayoutScript.component_prefix_get, _LayoutScript.component_prefix_set)
    __swig_setmethods__["layout"] = _LayoutScript.component_layout_set
    __swig_getmethods__["layout"] = _LayoutScript.component_layout_get
    if _newclass:
        layout = _swig_property(_LayoutScript.component_layout_get, _LayoutScript.component_layout_set)
    __swig_setmethods__["extractionMethod"] = _LayoutScript.component_extractionMethod_set
    __swig_getmethods__["extractionMethod"] = _LayoutScript.component_extractionMethod_get
    if _newclass:
        extractionMethod = _swig_property(_LayoutScript.component_extractionMethod_get, _LayoutScript.component_extractionMethod_set)
    __swig_setmethods__["extractionParameter"] = _LayoutScript.component_extractionParameter_set
    __swig_getmethods__["extractionParameter"] = _LayoutScript.component_extractionParameter_get
    if _newclass:
        extractionParameter = _swig_property(_LayoutScript.component_extractionParameter_get, _LayoutScript.component_extractionParameter_set)
    __swig_setmethods__["extractionDeviceParameter"] = _LayoutScript.component_extractionDeviceParameter_set
    __swig_getmethods__["extractionDeviceParameter"] = _LayoutScript.component_extractionDeviceParameter_get
    if _newclass:
        extractionDeviceParameter = _swig_property(_LayoutScript.component_extractionDeviceParameter_get, _LayoutScript.component_extractionDeviceParameter_set)

    def setName(self, arg2):
        return _LayoutScript.component_setName(self, arg2)

    def setLibrary(self, arg2):
        return _LayoutScript.component_setLibrary(self, arg2)

    def getLibrary(self):
        return _LayoutScript.component_getLibrary(self)

    def getName(self):
        return _LayoutScript.component_getName(self)

    def setNameLibrary(self, arg2, arg3):
        return _LayoutScript.component_setNameLibrary(self, arg2, arg3)

    def setSymbol(self, arg2):
        return _LayoutScript.component_setSymbol(self, arg2)

    def getSymbol(self, pos=0):
        return _LayoutScript.component_getSymbol(self, pos)

    def createSymbol(self, nl):
        return _LayoutScript.component_createSymbol(self, nl)

    def setNetlist(self, type, value):
        return _LayoutScript.component_setNetlist(self, type, value)

    def setModel(self, type, value):
        return _LayoutScript.component_setModel(self, type, value)
component_swigregister = _LayoutScript.component_swigregister
component_swigregister(component)

class components(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, components, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, components, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    if _newclass:
        findComponent = staticmethod(_LayoutScript.components_findComponent)
    else:
        findComponent = _LayoutScript.components_findComponent
    if _newclass:
        newComponent = staticmethod(_LayoutScript.components_newComponent)
    else:
        newComponent = _LayoutScript.components_newComponent
    if _newclass:
        addLib = staticmethod(_LayoutScript.components_addLib)
    else:
        addLib = _LayoutScript.components_addLib
    if _newclass:
        removeLib = staticmethod(_LayoutScript.components_removeLib)
    else:
        removeLib = _LayoutScript.components_removeLib
    if _newclass:
        getLibs = staticmethod(_LayoutScript.components_getLibs)
    else:
        getLibs = _LayoutScript.components_getLibs
    if _newclass:
        getComponents = staticmethod(_LayoutScript.components_getComponents)
    else:
        getComponents = _LayoutScript.components_getComponents
    if _newclass:
        getOaLibs = staticmethod(_LayoutScript.components_getOaLibs)
    else:
        getOaLibs = _LayoutScript.components_getOaLibs
    if _newclass:
        getOaCellNames = staticmethod(_LayoutScript.components_getOaCellNames)
    else:
        getOaCellNames = _LayoutScript.components_getOaCellNames
    if _newclass:
        getFilename = staticmethod(_LayoutScript.components_getFilename)
    else:
        getFilename = _LayoutScript.components_getFilename
    if _newclass:
        getPath = staticmethod(_LayoutScript.components_getPath)
    else:
        getPath = _LayoutScript.components_getPath
components_swigregister = _LayoutScript.components_swigregister
components_swigregister(components)

def components_findComponent(*args):
    return _LayoutScript.components_findComponent(*args)
components_findComponent = _LayoutScript.components_findComponent

def components_newComponent(*args):
    return _LayoutScript.components_newComponent(*args)
components_newComponent = _LayoutScript.components_newComponent

def components_addLib(filename):
    return _LayoutScript.components_addLib(filename)
components_addLib = _LayoutScript.components_addLib

def components_removeLib(filename):
    return _LayoutScript.components_removeLib(filename)
components_removeLib = _LayoutScript.components_removeLib

def components_getLibs():
    return _LayoutScript.components_getLibs()
components_getLibs = _LayoutScript.components_getLibs

def components_getComponents(lib):
    return _LayoutScript.components_getComponents(lib)
components_getComponents = _LayoutScript.components_getComponents

def components_getOaLibs():
    return _LayoutScript.components_getOaLibs()
components_getOaLibs = _LayoutScript.components_getOaLibs

def components_getOaCellNames(lib):
    return _LayoutScript.components_getOaCellNames(lib)
components_getOaCellNames = _LayoutScript.components_getOaCellNames

def components_getFilename(lib):
    return _LayoutScript.components_getFilename(lib)
components_getFilename = _LayoutScript.components_getFilename

def components_getPath(lib):
    return _LayoutScript.components_getPath(lib)
components_getPath = _LayoutScript.components_getPath

class console(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, console, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, console, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    if _newclass:
        openConsole = staticmethod(_LayoutScript.console_openConsole)
    else:
        openConsole = _LayoutScript.console_openConsole
    if _newclass:
        exists = staticmethod(_LayoutScript.console_exists)
    else:
        exists = _LayoutScript.console_exists
    if _newclass:
        send = staticmethod(_LayoutScript.console_send)
    else:
        send = _LayoutScript.console_send
console_swigregister = _LayoutScript.console_swigregister
console_swigregister(console)

def console_openConsole(app, path, parameter):
    return _LayoutScript.console_openConsole(app, path, parameter)
console_openConsole = _LayoutScript.console_openConsole

def console_exists(app):
    return _LayoutScript.console_exists(app)
console_exists = _LayoutScript.console_exists

def console_send(app, command):
    return _LayoutScript.console_send(app, command)
console_send = _LayoutScript.console_send

class drawingField(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, drawingField, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, drawingField, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_setmethods__["currentCell"] = _LayoutScript.drawingField_currentCell_set
    __swig_getmethods__["currentCell"] = _LayoutScript.drawingField_currentCell_get
    if _newclass:
        currentCell = _swig_property(_LayoutScript.drawingField_currentCell_get, _LayoutScript.drawingField_currentCell_set)
    __swig_setmethods__["firstCell"] = _LayoutScript.drawingField_firstCell_set
    __swig_getmethods__["firstCell"] = _LayoutScript.drawingField_firstCell_get
    if _newclass:
        firstCell = _swig_property(_LayoutScript.drawingField_firstCell_get, _LayoutScript.drawingField_firstCell_set)
    __swig_setmethods__["databaseunits"] = _LayoutScript.drawingField_databaseunits_set
    __swig_getmethods__["databaseunits"] = _LayoutScript.drawingField_databaseunits_get
    if _newclass:
        databaseunits = _swig_property(_LayoutScript.drawingField_databaseunits_get, _LayoutScript.drawingField_databaseunits_set)
    __swig_setmethods__["userunits"] = _LayoutScript.drawingField_userunits_set
    __swig_getmethods__["userunits"] = _LayoutScript.drawingField_userunits_get
    if _newclass:
        userunits = _swig_property(_LayoutScript.drawingField_userunits_get, _LayoutScript.drawingField_userunits_set)
    __swig_setmethods__["gridauto"] = _LayoutScript.drawingField_gridauto_set
    __swig_getmethods__["gridauto"] = _LayoutScript.drawingField_gridauto_get
    if _newclass:
        gridauto = _swig_property(_LayoutScript.drawingField_gridauto_get, _LayoutScript.drawingField_gridauto_set)
    __swig_setmethods__["activeLayer"] = _LayoutScript.drawingField_activeLayer_set
    __swig_getmethods__["activeLayer"] = _LayoutScript.drawingField_activeLayer_get
    if _newclass:
        activeLayer = _swig_property(_LayoutScript.drawingField_activeLayer_get, _LayoutScript.drawingField_activeLayer_set)
    __swig_setmethods__["gridX"] = _LayoutScript.drawingField_gridX_set
    __swig_getmethods__["gridX"] = _LayoutScript.drawingField_gridX_get
    if _newclass:
        gridX = _swig_property(_LayoutScript.drawingField_gridX_get, _LayoutScript.drawingField_gridX_set)
    __swig_setmethods__["gridY"] = _LayoutScript.drawingField_gridY_set
    __swig_getmethods__["gridY"] = _LayoutScript.drawingField_gridY_get
    if _newclass:
        gridY = _swig_property(_LayoutScript.drawingField_gridY_get, _LayoutScript.drawingField_gridY_set)
    __swig_setmethods__["gridOffsetX"] = _LayoutScript.drawingField_gridOffsetX_set
    __swig_getmethods__["gridOffsetX"] = _LayoutScript.drawingField_gridOffsetX_get
    if _newclass:
        gridOffsetX = _swig_property(_LayoutScript.drawingField_gridOffsetX_get, _LayoutScript.drawingField_gridOffsetX_set)
    __swig_setmethods__["gridOffsetY"] = _LayoutScript.drawingField_gridOffsetY_set
    __swig_getmethods__["gridOffsetY"] = _LayoutScript.drawingField_gridOffsetY_get
    if _newclass:
        gridOffsetY = _swig_property(_LayoutScript.drawingField_gridOffsetY_get, _LayoutScript.drawingField_gridOffsetY_set)
    __swig_setmethods__["gridMinimum"] = _LayoutScript.drawingField_gridMinimum_set
    __swig_getmethods__["gridMinimum"] = _LayoutScript.drawingField_gridMinimum_get
    if _newclass:
        gridMinimum = _swig_property(_LayoutScript.drawingField_gridMinimum_get, _LayoutScript.drawingField_gridMinimum_set)
    __swig_setmethods__["libname"] = _LayoutScript.drawingField_libname_set
    __swig_getmethods__["libname"] = _LayoutScript.drawingField_libname_get
    if _newclass:
        libname = _swig_property(_LayoutScript.drawingField_libname_get, _LayoutScript.drawingField_libname_set)
    __swig_setmethods__["fileType"] = _LayoutScript.drawingField_fileType_set
    __swig_getmethods__["fileType"] = _LayoutScript.drawingField_fileType_get
    if _newclass:
        fileType = _swig_property(_LayoutScript.drawingField_fileType_get, _LayoutScript.drawingField_fileType_set)
    __swig_setmethods__["previousCell"] = _LayoutScript.drawingField_previousCell_set
    __swig_getmethods__["previousCell"] = _LayoutScript.drawingField_previousCell_get
    if _newclass:
        previousCell = _swig_property(_LayoutScript.drawingField_previousCell_get, _LayoutScript.drawingField_previousCell_set)

    def fSelect(self):
        return _LayoutScript.drawingField_fSelect(self)

    def fAllSelect(self):
        return _LayoutScript.drawingField_fAllSelect(self)

    def fDeselect(self):
        return _LayoutScript.drawingField_fDeselect(self)

    def fAllDeselect(self):
        return _LayoutScript.drawingField_fAllDeselect(self)

    def pSelect(self):
        return _LayoutScript.drawingField_pSelect(self)

    def pDeselect(self):
        return _LayoutScript.drawingField_pDeselect(self)

    def cSelect(self):
        return _LayoutScript.drawingField_cSelect(self)

    def cDeselect(self):
        return _LayoutScript.drawingField_cDeselect(self)

    def invertSelect(self):
        return _LayoutScript.drawingField_invertSelect(self)

    def selectAll(self):
        return _LayoutScript.drawingField_selectAll(self)

    def selectVisible(self):
        return _LayoutScript.drawingField_selectVisible(self)

    def deselectAll(self):
        return _LayoutScript.drawingField_deselectAll(self)

    def selectActiveLayer(self):
        return _LayoutScript.drawingField_selectActiveLayer(self)

    def deselectActiveLayer(self):
        return _LayoutScript.drawingField_deselectActiveLayer(self)

    def pathSelect(self):
        return _LayoutScript.drawingField_pathSelect(self)

    def pathDeselect(self):
        return _LayoutScript.drawingField_pathDeselect(self)

    def boxSelect(self):
        return _LayoutScript.drawingField_boxSelect(self)

    def boxDeselect(self):
        return _LayoutScript.drawingField_boxDeselect(self)

    def polygonSelect(self):
        return _LayoutScript.drawingField_polygonSelect(self)

    def polygonDeselect(self):
        return _LayoutScript.drawingField_polygonDeselect(self)

    def textSelect(self):
        return _LayoutScript.drawingField_textSelect(self)

    def selectText(self, textname):
        return _LayoutScript.drawingField_selectText(self, textname)

    def selectCellref(self, cellname):
        return _LayoutScript.drawingField_selectCellref(self, cellname)

    def textDeselect(self):
        return _LayoutScript.drawingField_textDeselect(self)

    def setGrid(self, raster):
        return _LayoutScript.drawingField_setGrid(self, raster)

    def setCell(self, *args):
        return _LayoutScript.drawingField_setCell(self, *args)

    def relink(self, cell):
        return _LayoutScript.drawingField_relink(self, cell)

    def cellUp(self):
        return _LayoutScript.drawingField_cellUp(self)

    def mergeSelect(self):
        return _LayoutScript.drawingField_mergeSelect(self)

    def deleteSelect(self):
        return _LayoutScript.drawingField_deleteSelect(self)

    def deleteCell(self, arg2):
        return _LayoutScript.drawingField_deleteCell(self, arg2)

    def scaledCell(self, c, sx, sy):
        return _LayoutScript.drawingField_scaledCell(self, c, sx, sy)

    def scalePlus(self):
        return _LayoutScript.drawingField_scalePlus(self)

    def scaleMinus(self):
        return _LayoutScript.drawingField_scaleMinus(self)

    def scaleFull(self):
        return _LayoutScript.drawingField_scaleFull(self)

    def scaleSelect(self):
        return _LayoutScript.drawingField_scaleSelect(self)

    def scaleEins(self):
        return _LayoutScript.drawingField_scaleEins(self)

    def scrollLeft(self):
        return _LayoutScript.drawingField_scrollLeft(self)

    def scrollRight(self):
        return _LayoutScript.drawingField_scrollRight(self)

    def scrollUp(self):
        return _LayoutScript.drawingField_scrollUp(self)

    def scrollDown(self):
        return _LayoutScript.drawingField_scrollDown(self)

    def setView(self, scale, x, y):
        return _LayoutScript.drawingField_setView(self, scale, x, y)

    def getView(self, scale, x, y):
        return _LayoutScript.drawingField_getView(self, scale, x, y)

    def getViewMacro(self):
        return _LayoutScript.drawingField_getViewMacro(self)

    def showGridToggle(self):
        return _LayoutScript.drawingField_showGridToggle(self)

    def setAutoGrid(self):
        return _LayoutScript.drawingField_setAutoGrid(self)

    def undo(self):
        return _LayoutScript.drawingField_undo(self)

    def redo(self):
        return _LayoutScript.drawingField_redo(self)

    def prepareUndo(self):
        return _LayoutScript.drawingField_prepareUndo(self)

    def resetUndo(self):
        return _LayoutScript.drawingField_resetUndo(self)

    def openFile(self, s):
        return _LayoutScript.drawingField_openFile(self, s)

    def openView(self, library, cellName, viewName):
        return _LayoutScript.drawingField_openView(self, library, cellName, viewName)

    def importView(self, library, cellName, viewName):
        return _LayoutScript.drawingField_importView(self, library, cellName, viewName)

    def saveFile(self, s):
        return _LayoutScript.drawingField_saveFile(self, s)

    def importFile(self, s):
        return _LayoutScript.drawingField_importFile(self, s)

    def importViaFile(self, s):
        return _LayoutScript.drawingField_importViaFile(self, s)

    def updateFile(self, s):
        return _LayoutScript.drawingField_updateFile(self, s)

    def saveLayer(self, fileName, layer):
        return _LayoutScript.drawingField_saveLayer(self, fileName, layer)

    def saveScreenshot(self, filename):
        return _LayoutScript.drawingField_saveScreenshot(self, filename)

    def findCell(self, s):
        return _LayoutScript.drawingField_findCell(self, s)

    def findCellRegExp(self, s):
        return _LayoutScript.drawingField_findCellRegExp(self, s)

    def copyLayerToCell(self, layer):
        return _LayoutScript.drawingField_copyLayerToCell(self, layer)

    def copyLayerSized(self, sourcelayer, destinationlayer, size, type):
        return _LayoutScript.drawingField_copyLayerSized(self, sourcelayer, destinationlayer, size, type)

    def copyLayerSizedAsym(self, sourcelayer, destinationlayer, sizeX, sizeY):
        return _LayoutScript.drawingField_copyLayerSizedAsym(self, sourcelayer, destinationlayer, sizeX, sizeY)

    def existCellname(self, s):
        return _LayoutScript.drawingField_existCellname(self, s)

    def addCell(self):
        return _LayoutScript.drawingField_addCell(self)

    def newCell(self):
        return _LayoutScript.drawingField_newCell(self)

    def deleteActuellCell(self):
        return _LayoutScript.drawingField_deleteActuellCell(self)

    def deleteCurrentCell(self):
        return _LayoutScript.drawingField_deleteCurrentCell(self)

    def deleteAllCell(self):
        return _LayoutScript.drawingField_deleteAllCell(self)

    def p(self, x, y):
        return _LayoutScript.drawingField_p(self, x, y)

    def pRel(self, x, y):
        return _LayoutScript.drawingField_pRel(self, x, y)

    def pDir(self, length, dir):
        return _LayoutScript.drawingField_pDir(self, length, dir)

    def pMove(self, x, y):
        return _LayoutScript.drawingField_pMove(self, x, y)

    def pointMove(self, *args):
        return _LayoutScript.drawingField_pointMove(self, *args)

    def delPoint(self):
        return _LayoutScript.drawingField_delPoint(self)

    def clearPoints(self):
        return _LayoutScript.drawingField_clearPoints(self)

    def getPoints(self):
        return _LayoutScript.drawingField_getPoints(self)

    def box(self):
        return _LayoutScript.drawingField_box(self)

    def dot(self):
        return _LayoutScript.drawingField_dot(self)

    def polygon(self):
        return _LayoutScript.drawingField_polygon(self)

    def path(self):
        return _LayoutScript.drawingField_path(self)

    def text(self, s):
        return _LayoutScript.drawingField_text(self, s)

    def cellRef(self, s):
        return _LayoutScript.drawingField_cellRef(self, s)

    def cellrefarray(self, s, x, y):
        return _LayoutScript.drawingField_cellrefarray(self, s, x, y)

    def spiral(self):
        return _LayoutScript.drawingField_spiral(self)

    def coil(self, turns):
        return _LayoutScript.drawingField_coil(self, turns)

    def circle(self):
        return _LayoutScript.drawingField_circle(self)

    def circleBox(self):
        return _LayoutScript.drawingField_circleBox(self)

    def circleFit(self):
        return _LayoutScript.drawingField_circleFit(self)

    def ellipse(self):
        return _LayoutScript.drawingField_ellipse(self)

    def sector(self):
        return _LayoutScript.drawingField_sector(self)

    def arc(self):
        return _LayoutScript.drawingField_arc(self)

    def polygonArc(self):
        return _LayoutScript.drawingField_polygonArc(self)

    def bezier2(self):
        return _LayoutScript.drawingField_bezier2(self)

    def bezier3(self):
        return _LayoutScript.drawingField_bezier3(self)

    def findTopCell(self):
        return _LayoutScript.drawingField_findTopCell(self)

    def compareCell(self, s):
        return _LayoutScript.drawingField_compareCell(self, s)

    def compareCellXor(self, s):
        return _LayoutScript.drawingField_compareCellXor(self, s)

    def deleteExceptOneLayer(self, layer):
        return _LayoutScript.drawingField_deleteExceptOneLayer(self, layer)

    def swapLayer(self, i, k):
        return _LayoutScript.drawingField_swapLayer(self, i, k)

    def swapLayerSelect(self, i, k):
        return _LayoutScript.drawingField_swapLayerSelect(self, i, k)

    def swapLayerAll(self, i, k):
        return _LayoutScript.drawingField_swapLayerAll(self, i, k)

    def mapLayer(self, t):
        return _LayoutScript.drawingField_mapLayer(self, t)

    def flat(self):
        return _LayoutScript.drawingField_flat(self)

    def flatAll(self):
        return _LayoutScript.drawingField_flatAll(self)

    def groupSimple(self):
        return _LayoutScript.drawingField_groupSimple(self)

    def group(self):
        return _LayoutScript.drawingField_group(self)

    def groupStructure(self):
        return _LayoutScript.drawingField_groupStructure(self)

    def groupGlobal(self):
        return _LayoutScript.drawingField_groupGlobal(self)

    def toBox(self):
        return _LayoutScript.drawingField_toBox(self)

    def toPolygon(self):
        return _LayoutScript.drawingField_toPolygon(self)

    def toPath(self):
        return _LayoutScript.drawingField_toPath(self)

    def toCircle(self):
        return _LayoutScript.drawingField_toCircle(self)

    def toLines(self):
        return _LayoutScript.drawingField_toLines(self)

    def closeToPolygon(self):
        return _LayoutScript.drawingField_closeToPolygon(self)

    def closedPathToPolygon(self):
        return _LayoutScript.drawingField_closedPathToPolygon(self)

    def move(self):
        return _LayoutScript.drawingField_move(self)

    def moveX(self):
        return _LayoutScript.drawingField_moveX(self)

    def moveY(self):
        return _LayoutScript.drawingField_moveY(self)

    def moveOrigin(self):
        return _LayoutScript.drawingField_moveOrigin(self)

    def cut(self):
        return _LayoutScript.drawingField_cut(self)

    def mirror(self):
        return _LayoutScript.drawingField_mirror(self)

    def rotate(self, angle):
        return _LayoutScript.drawingField_rotate(self, angle)

    def copy(self):
        return _LayoutScript.drawingField_copy(self)

    def copyMirror(self):
        return _LayoutScript.drawingField_copyMirror(self)

    def arrayCopy(self, nx, ny):
        return _LayoutScript.drawingField_arrayCopy(self, nx, ny)

    def scale(self, *args):
        return _LayoutScript.drawingField_scale(self, *args)

    def setWidth(self, w):
        return _LayoutScript.drawingField_setWidth(self, w)

    def setCap(self, w):
        return _LayoutScript.drawingField_setCap(self, w)

    def copyCurrentCell(self):
        return _LayoutScript.drawingField_copyCurrentCell(self)

    def extractCurrentCell(self):
        return _LayoutScript.drawingField_extractCurrentCell(self)

    def stripUnneeded(self):
        return _LayoutScript.drawingField_stripUnneeded(self)

    def stripIdenticalElements(self):
        return _LayoutScript.drawingField_stripIdenticalElements(self)

    def stripEmptyCells(self):
        return _LayoutScript.drawingField_stripEmptyCells(self)

    def removeCellArrays(self):
        return _LayoutScript.drawingField_removeCellArrays(self)

    def removeRotatedCellArrays(self):
        return _LayoutScript.drawingField_removeRotatedCellArrays(self)

    def removeNotOrthogonalCellref(self):
        return _LayoutScript.drawingField_removeNotOrthogonalCellref(self)

    def removeScaledCellref(self):
        return _LayoutScript.drawingField_removeScaledCellref(self)

    def extractActiveLayer(self):
        return _LayoutScript.drawingField_extractActiveLayer(self)

    def extractLayer(self, layer):
        return _LayoutScript.drawingField_extractLayer(self, layer)

    def deleteLayer(self, *args):
        return _LayoutScript.drawingField_deleteLayer(self, *args)

    def sizeLayer(self, layer, size):
        return _LayoutScript.drawingField_sizeLayer(self, layer, size)

    def copyLayer(self, sourceLayer, sourceDatatype, destLayer):
        return _LayoutScript.drawingField_copyLayer(self, sourceLayer, sourceDatatype, destLayer)

    def moveLayer(self, sourceLayer, sourceDatatype, destLayer):
        return _LayoutScript.drawingField_moveLayer(self, sourceLayer, sourceDatatype, destLayer)

    def deleteText(self):
        return _LayoutScript.drawingField_deleteText(self)

    def deleteZeroWidthPath(self):
        return _LayoutScript.drawingField_deleteZeroWidthPath(self)

    def alignCenterXY(self):
        return _LayoutScript.drawingField_alignCenterXY(self)

    def alignCenterX(self):
        return _LayoutScript.drawingField_alignCenterX(self)

    def alignCenterY(self):
        return _LayoutScript.drawingField_alignCenterY(self)

    def alignLeft(self):
        return _LayoutScript.drawingField_alignLeft(self)

    def alignTop(self):
        return _LayoutScript.drawingField_alignTop(self)

    def alignRight(self):
        return _LayoutScript.drawingField_alignRight(self)

    def alignBottom(self):
        return _LayoutScript.drawingField_alignBottom(self)

    def alignValue(self, dis):
        return _LayoutScript.drawingField_alignValue(self, dis)

    def centerXY(self):
        return _LayoutScript.drawingField_centerXY(self)

    def centerX(self):
        return _LayoutScript.drawingField_centerX(self)

    def centerY(self):
        return _LayoutScript.drawingField_centerY(self)

    def addConvexPolygon(self):
        return _LayoutScript.drawingField_addConvexPolygon(self)

    def addBoundingBox(self):
        return _LayoutScript.drawingField_addBoundingBox(self)

    def useLayer(self, layer):
        return _LayoutScript.drawingField_useLayer(self, layer)

    def unusedLayer(self, startLayer):
        return _LayoutScript.drawingField_unusedLayer(self, startLayer)

    def modified(self):
        return _LayoutScript.drawingField_modified(self)

    def setModifyChanged(self):
        return _LayoutScript.drawingField_setModifyChanged(self)

    def setModifyAdded(self):
        return _LayoutScript.drawingField_setModifyAdded(self)

    def setModifySaved(self):
        return _LayoutScript.drawingField_setModifySaved(self)

    def crossSection(self, *args):
        return _LayoutScript.drawingField_crossSection(self, *args)

    def fillSelectedShapes(self, *args):
        return _LayoutScript.drawingField_fillSelectedShapes(self, *args)

    def separateLayer(self, arg2, layer):
        return _LayoutScript.drawingField_separateLayer(self, arg2, layer)

    def copyArea(self, *args):
        return _LayoutScript.drawingField_copyArea(self, *args)

    def copyDimension(self, minWidth, maxwidth, minLength, maxLangth, layerDest, layerSource=-1):
        return _LayoutScript.drawingField_copyDimension(self, minWidth, maxwidth, minLength, maxLangth, layerDest, layerSource)

    def copyTouching(self, layerA, layerB, layerOutA, layerOutB=-1):
        return _LayoutScript.drawingField_copyTouching(self, layerA, layerB, layerOutA, layerOutB)

    def copyOverlapping(self, layerA, layerB, layerOutA, layerOutB=-1):
        return _LayoutScript.drawingField_copyOverlapping(self, layerA, layerB, layerOutA, layerOutB)

    def copyTouchingOrOverlapping(self, layerA, layerB, layerOutA, layerOutB=-1):
        return _LayoutScript.drawingField_copyTouchingOrOverlapping(self, layerA, layerB, layerOutA, layerOutB)

    def densityFill(self, layer, density, shapeSpace, minWidth, minSpace, frameSize):
        return _LayoutScript.drawingField_densityFill(self, layer, density, shapeSpace, minWidth, minSpace, frameSize)

    def point(self, *args):
        return _LayoutScript.drawingField_point(self, *args)

    def pointRel(self, *args):
        return _LayoutScript.drawingField_pointRel(self, *args)

    def autoRuler(self, arg2):
        return _LayoutScript.drawingField_autoRuler(self, arg2)

    def derivedLayer(self, layerA, layerB, resultLayer, operation):
        return _LayoutScript.drawingField_derivedLayer(self, layerA, layerB, resultLayer, operation)

    def BSpline(self):
        return _LayoutScript.drawingField_BSpline(self)
    __swig_destroy__ = _LayoutScript.delete_drawingField
    __del__ = lambda self: None
drawingField_swigregister = _LayoutScript.drawingField_swigregister
drawingField_swigregister(drawingField)

class drawingField3d(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, drawingField3d, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, drawingField3d, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def addCell(self):
        return _LayoutScript.drawingField3d_addCell(self)

    def deleteAllCell(self):
        return _LayoutScript.drawingField3d_deleteAllCell(self)

    def isEmpty(self):
        return _LayoutScript.drawingField3d_isEmpty(self)
    __swig_setmethods__["databaseunits"] = _LayoutScript.drawingField3d_databaseunits_set
    __swig_getmethods__["databaseunits"] = _LayoutScript.drawingField3d_databaseunits_get
    if _newclass:
        databaseunits = _swig_property(_LayoutScript.drawingField3d_databaseunits_get, _LayoutScript.drawingField3d_databaseunits_set)
    __swig_setmethods__["userunits"] = _LayoutScript.drawingField3d_userunits_set
    __swig_getmethods__["userunits"] = _LayoutScript.drawingField3d_userunits_get
    if _newclass:
        userunits = _swig_property(_LayoutScript.drawingField3d_userunits_get, _LayoutScript.drawingField3d_userunits_set)
    __swig_setmethods__["showOrigin"] = _LayoutScript.drawingField3d_showOrigin_set
    __swig_getmethods__["showOrigin"] = _LayoutScript.drawingField3d_showOrigin_get
    if _newclass:
        showOrigin = _swig_property(_LayoutScript.drawingField3d_showOrigin_get, _LayoutScript.drawingField3d_showOrigin_set)
    __swig_setmethods__["zScale"] = _LayoutScript.drawingField3d_zScale_set
    __swig_getmethods__["zScale"] = _LayoutScript.drawingField3d_zScale_get
    if _newclass:
        zScale = _swig_property(_LayoutScript.drawingField3d_zScale_get, _LayoutScript.drawingField3d_zScale_set)
    __swig_setmethods__["currentCell"] = _LayoutScript.drawingField3d_currentCell_set
    __swig_getmethods__["currentCell"] = _LayoutScript.drawingField3d_currentCell_get
    if _newclass:
        currentCell = _swig_property(_LayoutScript.drawingField3d_currentCell_get, _LayoutScript.drawingField3d_currentCell_set)
    __swig_setmethods__["firstCell"] = _LayoutScript.drawingField3d_firstCell_set
    __swig_getmethods__["firstCell"] = _LayoutScript.drawingField3d_firstCell_get
    if _newclass:
        firstCell = _swig_property(_LayoutScript.drawingField3d_firstCell_get, _LayoutScript.drawingField3d_firstCell_set)

    def showOriginToggle(self):
        return _LayoutScript.drawingField3d_showOriginToggle(self)

    def scaleFull(self):
        return _LayoutScript.drawingField3d_scaleFull(self)

    def modified(self):
        return _LayoutScript.drawingField3d_modified(self)

    def setModifyChanged(self):
        return _LayoutScript.drawingField3d_setModifyChanged(self)

    def setModifyAdded(self):
        return _LayoutScript.drawingField3d_setModifyAdded(self)

    def setModifySaved(self):
        return _LayoutScript.drawingField3d_setModifySaved(self)

    def selectAll(self):
        return _LayoutScript.drawingField3d_selectAll(self)

    def selectVisible(self):
        return _LayoutScript.drawingField3d_selectVisible(self)

    def deselectAll(self):
        return _LayoutScript.drawingField3d_deselectAll(self)

    def meshSelect(self):
        return _LayoutScript.drawingField3d_meshSelect(self)

    def meshDeselect(self):
        return _LayoutScript.drawingField3d_meshDeselect(self)

    def invertSelect(self):
        return _LayoutScript.drawingField3d_invertSelect(self)

    def openFile(self, filename):
        return _LayoutScript.drawingField3d_openFile(self, filename)

    def saveFile(self, filename):
        return _LayoutScript.drawingField3d_saveFile(self, filename)
    __swig_destroy__ = _LayoutScript.delete_drawingField3d
    __del__ = lambda self: None
drawingField3d_swigregister = _LayoutScript.drawingField3d_swigregister
drawingField3d_swigregister(drawingField3d)

class doubleList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, doubleList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, doubleList, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _LayoutScript.new_doubleList()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def append(self, d):
        return _LayoutScript.doubleList_append(self, d)

    def at(self, i):
        return _LayoutScript.doubleList_at(self, i)

    def contains(self, d):
        return _LayoutScript.doubleList_contains(self, d)

    def insert(self, pos, value):
        return _LayoutScript.doubleList_insert(self, pos, value)

    def indexOf(self, i, index=0):
        return _LayoutScript.doubleList_indexOf(self, i, index)

    def removeAll(self, d):
        return _LayoutScript.doubleList_removeAll(self, d)

    def removeAt(self, pos):
        return _LayoutScript.doubleList_removeAt(self, pos)

    def size(self):
        return _LayoutScript.doubleList_size(self)

    def set(self, i, d):
        return _LayoutScript.doubleList_set(self, i, d)

    def swap(self, pos1, pos2):
        return _LayoutScript.doubleList_swap(self, pos1, pos2)
    __swig_destroy__ = _LayoutScript.delete_doubleList
    __del__ = lambda self: None
doubleList_swigregister = _LayoutScript.doubleList_swigregister
doubleList_swigregister(doubleList)

class drc(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, drc, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, drc, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def addViolation(self, name, value, p1, p2, type=0, status=0):
        return _LayoutScript.drc_addViolation(self, name, value, p1, p2, type, status)

    def angle90OnLayer(self, layer, mergeBefore=False):
        return _LayoutScript.drc_angle90OnLayer(self, layer, mergeBefore)

    def angle45OnLayer(self, layer, mergeBefore=False):
        return _LayoutScript.drc_angle45OnLayer(self, layer, mergeBefore)

    def circleRadiusOnLayer(self, min, max, layer):
        return _LayoutScript.drc_circleRadiusOnLayer(self, min, max, layer)

    def clearDRC(self):
        return _LayoutScript.drc_clearDRC(self)

    def clearViolationView(self):
        return _LayoutScript.drc_clearViolationView(self)

    def densityOnLayer(self, layer, box, min, max):
        return _LayoutScript.drc_densityOnLayer(self, layer, box, min, max)

    def dimensionOnLayer(self, lengthMin, lengthMax, widthMin, widthMax, layer, mergeBefore=False):
        return _LayoutScript.drc_dimensionOnLayer(self, lengthMin, lengthMax, widthMin, widthMax, layer, mergeBefore)
    __swig_setmethods__["errorLayer"] = _LayoutScript.drc_errorLayer_set
    __swig_getmethods__["errorLayer"] = _LayoutScript.drc_errorLayer_get
    if _newclass:
        errorLayer = _swig_property(_LayoutScript.drc_errorLayer_get, _LayoutScript.drc_errorLayer_set)
    __swig_setmethods__["errorCount"] = _LayoutScript.drc_errorCount_set
    __swig_getmethods__["errorCount"] = _LayoutScript.drc_errorCount_get
    if _newclass:
        errorCount = _swig_property(_LayoutScript.drc_errorCount_get, _LayoutScript.drc_errorCount_set)
    __swig_setmethods__["error"] = _LayoutScript.drc_error_set
    __swig_getmethods__["error"] = _LayoutScript.drc_error_get
    if _newclass:
        error = _swig_property(_LayoutScript.drc_error_get, _LayoutScript.drc_error_set)

    def exactDimensionOnLayer(self, length, width, layer, mergeBefore=False):
        return _LayoutScript.drc_exactDimensionOnLayer(self, length, width, layer, mergeBefore)

    def exactInside(self, distance, insideLayer, layer1, layer2=-1, layer3=-1):
        return _LayoutScript.drc_exactInside(self, distance, insideLayer, layer1, layer2, layer3)

    def getReport(self):
        return _LayoutScript.drc_getReport(self)

    def getViolationName(self, index):
        return _LayoutScript.drc_getViolationName(self, index)

    def getViolationValue(self, index):
        return _LayoutScript.drc_getViolationValue(self, index)

    def getViolationStatus(self, index):
        return _LayoutScript.drc_getViolationStatus(self, index)

    def getViolationType(self, index):
        return _LayoutScript.drc_getViolationType(self, index)

    def getViolationPoint1(self, index):
        return _LayoutScript.drc_getViolationPoint1(self, index)

    def getViolationPoint2(self, index):
        return _LayoutScript.drc_getViolationPoint2(self, index)

    def inside(self, distance, insideLayer, layer1, layer2=-1, layer3=-1):
        return _LayoutScript.drc_inside(self, distance, insideLayer, layer1, layer2, layer3)

    def layerCombination(self, layer1, layer2, layer3=-1, layer4=-1, layer5=-1):
        return _LayoutScript.drc_layerCombination(self, layer1, layer2, layer3, layer4, layer5)

    def loadViolationList(self, filename):
        return _LayoutScript.drc_loadViolationList(self, filename)

    def maximumAreaOnLayer(self, layer, areavalue, mergeBefore=False):
        return _LayoutScript.drc_maximumAreaOnLayer(self, layer, areavalue, mergeBefore)

    def maximumAngleOnLayer(self, anglevalue, layer, mergeBefore=False):
        return _LayoutScript.drc_maximumAngleOnLayer(self, anglevalue, layer, mergeBefore)

    def minimumAngleOnLayer(self, anglevalue, layer, mergeBefore=False):
        return _LayoutScript.drc_minimumAngleOnLayer(self, anglevalue, layer, mergeBefore)

    def maximumDimensionOnLayer(self, length, width, layer, mergeBefore=False):
        return _LayoutScript.drc_maximumDimensionOnLayer(self, length, width, layer, mergeBefore)

    def maximumDistance(self, distance, layer1, layer2):
        return _LayoutScript.drc_maximumDistance(self, distance, layer1, layer2)

    def maximumInside(self, distance, insideLayer, layer1, layer2=-1, layer3=-1):
        return _LayoutScript.drc_maximumInside(self, distance, insideLayer, layer1, layer2, layer3)

    def maximumInaccessibilityOnLayer(self, layer, inaccessibility, mergeBefore=False):
        return _LayoutScript.drc_maximumInaccessibilityOnLayer(self, layer, inaccessibility, mergeBefore)

    def maximumPerimeterOnLayer(self, layer, perimeter, mergeBefore=False):
        return _LayoutScript.drc_maximumPerimeterOnLayer(self, layer, perimeter, mergeBefore)

    def minimumAreaOnLayer(self, layer, areavalue, mergeBefore=False):
        return _LayoutScript.drc_minimumAreaOnLayer(self, layer, areavalue, mergeBefore)

    def minimumDimensionOnLayer(self, length, width, layer, mergeBefore=False):
        return _LayoutScript.drc_minimumDimensionOnLayer(self, length, width, layer, mergeBefore)

    def minimumDistance(self, distance, layer1, layer2):
        return _LayoutScript.drc_minimumDistance(self, distance, layer1, layer2)

    def minimumDistanceOrOverlap(self, distance, layer1, layer2, mode=True):
        return _LayoutScript.drc_minimumDistanceOrOverlap(self, distance, layer1, layer2, mode)

    def minimumElementDistance(self, distance, layer, mergeBefore=False):
        return _LayoutScript.drc_minimumElementDistance(self, distance, layer, mergeBefore)

    def minimumElementDistanceOnActiveLayer(self, distance):
        return _LayoutScript.drc_minimumElementDistanceOnActiveLayer(self, distance)

    def minimumEnclosure(self, distance, layer1, layer2):
        return _LayoutScript.drc_minimumEnclosure(self, distance, layer1, layer2)

    def minimumInaccessibilityOnLayer(self, layer, inaccessibility, mergeBefore=False):
        return _LayoutScript.drc_minimumInaccessibilityOnLayer(self, layer, inaccessibility, mergeBefore)

    def minimumInside(self, distance, insideLayer, layer1, layer2=-1, layer3=-1):
        return _LayoutScript.drc_minimumInside(self, distance, insideLayer, layer1, layer2, layer3)

    def minimumInsideOrOutside(self, distance, insideLayer, layer1, layer2=-1, layer3=-1):
        return _LayoutScript.drc_minimumInsideOrOutside(self, distance, insideLayer, layer1, layer2, layer3)

    def minimumNotchOnLayer(self, notchsize, layer, mergeBefore=False, testSlots=False):
        return _LayoutScript.drc_minimumNotchOnLayer(self, notchsize, layer, mergeBefore, testSlots)

    def minimumOverlap(self, overlap, layer1, layer2):
        return _LayoutScript.drc_minimumOverlap(self, overlap, layer1, layer2)

    def minimumOverlapDistance(self, distance, layer1, layer2):
        return _LayoutScript.drc_minimumOverlapDistance(self, distance, layer1, layer2)

    def minimumPerimeterOnLayer(self, layer, perimetervalue, mergeBefore=False):
        return _LayoutScript.drc_minimumPerimeterOnLayer(self, layer, perimetervalue, mergeBefore)

    def minimumSize(self, size, layer, mergeBefore=False, sharpAngles=True):
        return _LayoutScript.drc_minimumSize(self, size, layer, mergeBefore, sharpAngles)

    def noBoxOnLayer(self, layer):
        return _LayoutScript.drc_noBoxOnLayer(self, layer)

    def noBoxOnActiveLayer(self):
        return _LayoutScript.drc_noBoxOnActiveLayer(self)

    def noCircleOnLayer(self, layer):
        return _LayoutScript.drc_noCircleOnLayer(self, layer)

    def noCircleOnActiveLayer(self):
        return _LayoutScript.drc_noCircleOnActiveLayer(self)

    def noElementOnLayer(self, layer):
        return _LayoutScript.drc_noElementOnLayer(self, layer)

    def noElementOnActiveLayer(self):
        return _LayoutScript.drc_noElementOnActiveLayer(self)

    def noPathOnLayer(self, layer):
        return _LayoutScript.drc_noPathOnLayer(self, layer)

    def noPathOnActiveLayer(self):
        return _LayoutScript.drc_noPathOnActiveLayer(self)

    def noHolesOnLayer(self, layer, mergeBefore=False):
        return _LayoutScript.drc_noHolesOnLayer(self, layer, mergeBefore)

    def noPolygonOnLayer(self, layer):
        return _LayoutScript.drc_noPolygonOnLayer(self, layer)

    def noPolygonOnActiveLayer(self):
        return _LayoutScript.drc_noPolygonOnActiveLayer(self)

    def noSelfintersectionOnActiveLayer(self):
        return _LayoutScript.drc_noSelfintersectionOnActiveLayer(self)

    def noSelfintersectionOnLayer(self, layer):
        return _LayoutScript.drc_noSelfintersectionOnLayer(self, layer)

    def noSpikesOnLayer(self, layer, sharpAngles=False):
        return _LayoutScript.drc_noSpikesOnLayer(self, layer, sharpAngles)

    def noTextOnLayer(self, layer):
        return _LayoutScript.drc_noTextOnLayer(self, layer)

    def noTextOnActiveLayer(self):
        return _LayoutScript.drc_noTextOnActiveLayer(self)

    def noZeroWidthOnLayer(self, layer):
        return _LayoutScript.drc_noZeroWidthOnLayer(self, layer)

    def noZeroWidthOnActiveLayer(self):
        return _LayoutScript.drc_noZeroWidthOnActiveLayer(self)

    def onGrid(self, grid, layer):
        return _LayoutScript.drc_onGrid(self, grid, layer)

    def onlyCircleOnLayer(self, layer):
        return _LayoutScript.drc_onlyCircleOnLayer(self, layer)

    def onlyCircleOnActiveLayer(self):
        return _LayoutScript.drc_onlyCircleOnActiveLayer(self)

    def onlyRectangleOnActiveLayer(self):
        return _LayoutScript.drc_onlyRectangleOnActiveLayer(self)

    def onlyRectangleOnLayer(self, layer):
        return _LayoutScript.drc_onlyRectangleOnLayer(self, layer)

    def overlappingElements(self, layer):
        return _LayoutScript.drc_overlappingElements(self, layer)

    def overlappingElementsOnActiveLayer(self):
        return _LayoutScript.drc_overlappingElementsOnActiveLayer(self)
    __swig_setmethods__["ruleName"] = _LayoutScript.drc_ruleName_set
    __swig_getmethods__["ruleName"] = _LayoutScript.drc_ruleName_get
    if _newclass:
        ruleName = _swig_property(_LayoutScript.drc_ruleName_get, _LayoutScript.drc_ruleName_set)
    __swig_setmethods__["result"] = _LayoutScript.drc_result_set
    __swig_getmethods__["result"] = _LayoutScript.drc_result_get
    if _newclass:
        result = _swig_property(_LayoutScript.drc_result_get, _LayoutScript.drc_result_set)

    def removeNoDrcViolations(self, layer):
        return _LayoutScript.drc_removeNoDrcViolations(self, layer)

    def saveViolationList(self, filename):
        return _LayoutScript.drc_saveViolationList(self, filename)

    def setCheckCell(self):
        return _LayoutScript.drc_setCheckCell(self)

    def setCheckRegion(self, arg2, arg3):
        return _LayoutScript.drc_setCheckRegion(self, arg2, arg3)

    def setCheckView(self):
        return _LayoutScript.drc_setCheckView(self)

    def setErrorLayerToActiveLayer(self):
        return _LayoutScript.drc_setErrorLayerToActiveLayer(self)

    def setList(self, arg2):
        return _LayoutScript.drc_setList(self, arg2)

    def setGraphical(self, arg2):
        return _LayoutScript.drc_setGraphical(self, arg2)

    def setRegionMode(self):
        return _LayoutScript.drc_setRegionMode(self)

    def showReport(self):
        return _LayoutScript.drc_showReport(self)

    def widthDependentDistance(self, distance, width, layer, mergeBefore=False):
        return _LayoutScript.drc_widthDependentDistance(self, distance, width, layer, mergeBefore)

    def isCheckedList(self):
        return _LayoutScript.drc_isCheckedList(self)

    def isCheckedGraphical(self):
        return _LayoutScript.drc_isCheckedGraphical(self)

    def addViolationGraphical(self, p):
        return _LayoutScript.drc_addViolationGraphical(self, p)

    def overlapingElements(self, layer):
        return _LayoutScript.drc_overlapingElements(self, layer)

    def overlapingElementsOnActiveLayer(self):
        return _LayoutScript.drc_overlapingElementsOnActiveLayer(self)
    __swig_destroy__ = _LayoutScript.delete_drc
    __del__ = lambda self: None
drc_swigregister = _LayoutScript.drc_swigregister
drc_swigregister(drc)

class element(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, element, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, element, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_setmethods__["layerNum"] = _LayoutScript.element_layerNum_set
    __swig_getmethods__["layerNum"] = _LayoutScript.element_layerNum_get
    if _newclass:
        layerNum = _swig_property(_LayoutScript.element_layerNum_get, _LayoutScript.element_layerNum_set)

    def clearMirrorx(self):
        return _LayoutScript.element_clearMirrorx(self)
    __swig_setmethods__["datatype"] = _LayoutScript.element_datatype_set
    __swig_getmethods__["datatype"] = _LayoutScript.element_datatype_get
    if _newclass:
        datatype = _swig_property(_LayoutScript.element_datatype_get, _LayoutScript.element_datatype_set)

    def depend(self):
        return _LayoutScript.element_depend(self)

    def deselectAll(self):
        return _LayoutScript.element_deselectAll(self)

    def deleteSelect(self):
        return _LayoutScript.element_deleteSelect(self)

    def getBoundingBox(self):
        return _LayoutScript.element_getBoundingBox(self)

    def getCap(self):
        return _LayoutScript.element_getCap(self)

    def getDatatype(self):
        return _LayoutScript.element_getDatatype(self)

    def getName(self):
        return _LayoutScript.element_getName(self)

    def getNx(self):
        return _LayoutScript.element_getNx(self)

    def getNy(self):
        return _LayoutScript.element_getNy(self)

    def getPoints(self):
        return _LayoutScript.element_getPoints(self)

    def getSelectedPoints(self):
        return _LayoutScript.element_getSelectedPoints(self)

    def getPropertyString(self, num):
        return _LayoutScript.element_getPropertyString(self, num)

    def getPresentation(self):
        return _LayoutScript.element_getPresentation(self)

    def getTrans(self):
        return _LayoutScript.element_getTrans(self)

    def getWidth(self):
        return _LayoutScript.element_getWidth(self)

    def invertSelect(self):
        return _LayoutScript.element_invertSelect(self)

    def isBox(self):
        return _LayoutScript.element_isBox(self)

    def isCellref(self):
        return _LayoutScript.element_isCellref(self)

    def isCellrefArray(self):
        return _LayoutScript.element_isCellrefArray(self)

    def isCircle(self, *args):
        return _LayoutScript.element_isCircle(self, *args)

    def isPath(self):
        return _LayoutScript.element_isPath(self)

    def isPolygon(self):
        return _LayoutScript.element_isPolygon(self)

    def isText(self):
        return _LayoutScript.element_isText(self)

    def isRectangle(self):
        return _LayoutScript.element_isRectangle(self)

    def isSquare(self):
        return _LayoutScript.element_isSquare(self)

    def isShape(self):
        return _LayoutScript.element_isShape(self)

    def maximum(self, *args):
        return _LayoutScript.element_maximum(self, *args)

    def maximumSelect(self, *args):
        return _LayoutScript.element_maximumSelect(self, *args)

    def minimum(self, *args):
        return _LayoutScript.element_minimum(self, *args)

    def minimumSelect(self, *args):
        return _LayoutScript.element_minimumSelect(self, *args)

    def replaceText(self, arg2, arg3):
        return _LayoutScript.element_replaceText(self, arg2, arg3)

    def rotate(self, arg2):
        return _LayoutScript.element_rotate(self, arg2)

    def scale(self, arg2):
        return _LayoutScript.element_scale(self, arg2)
    __swig_setmethods__["select"] = _LayoutScript.element_select_set
    __swig_getmethods__["select"] = _LayoutScript.element_select_get
    if _newclass:
        select = _swig_property(_LayoutScript.element_select_get, _LayoutScript.element_select_set)

    def selectAll(self):
        return _LayoutScript.element_selectAll(self)

    def selectDatatype(self, t):
        return _LayoutScript.element_selectDatatype(self, t)

    def selectVisible(self):
        return _LayoutScript.element_selectVisible(self)

    def setCap(self, cap):
        return _LayoutScript.element_setCap(self, cap)

    def setCellRef(self, arg2):
        return _LayoutScript.element_setCellRef(self, arg2)

    def setDatatype(self, t):
        return _LayoutScript.element_setDatatype(self, t)

    def setDatatypeSelect(self, t):
        return _LayoutScript.element_setDatatypeSelect(self, t)

    def setMirrorx(self):
        return _LayoutScript.element_setMirrorx(self)

    def setName(self, arg2):
        return _LayoutScript.element_setName(self, arg2)

    def setNx(self, arg2):
        return _LayoutScript.element_setNx(self, arg2)

    def setNy(self, arg2):
        return _LayoutScript.element_setNy(self, arg2)

    def setPoints(self, arg2):
        return _LayoutScript.element_setPoints(self, arg2)

    def setPresentation(self, arg2):
        return _LayoutScript.element_setPresentation(self, arg2)

    def setPropertyString(self, num, s):
        return _LayoutScript.element_setPropertyString(self, num, s)

    def setTrans(self, arg2):
        return _LayoutScript.element_setTrans(self, arg2)

    def setWidth(self, width):
        return _LayoutScript.element_setWidth(self, width)

    def toggleMirrorx(self):
        return _LayoutScript.element_toggleMirrorx(self)
    if _newclass:
        angle = staticmethod(_LayoutScript.element_angle)
    else:
        angle = _LayoutScript.element_angle
    if _newclass:
        distance = staticmethod(_LayoutScript.element_distance)
    else:
        distance = _LayoutScript.element_distance
    if _newclass:
        round = staticmethod(_LayoutScript.element_round)
    else:
        round = _LayoutScript.element_round
    __swig_destroy__ = _LayoutScript.delete_element
    __del__ = lambda self: None
element_swigregister = _LayoutScript.element_swigregister
element_swigregister(element)

def element_angle(*args):
    return _LayoutScript.element_angle(*args)
element_angle = _LayoutScript.element_angle

def element_distance(*args):
    return _LayoutScript.element_distance(*args)
element_distance = _LayoutScript.element_distance

def element_round(d):
    return _LayoutScript.element_round(d)
element_round = _LayoutScript.element_round

class element3d(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, element3d, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, element3d, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_setmethods__["visible"] = _LayoutScript.element3d_visible_set
    __swig_getmethods__["visible"] = _LayoutScript.element3d_visible_get
    if _newclass:
        visible = _swig_property(_LayoutScript.element3d_visible_get, _LayoutScript.element3d_visible_set)
    __swig_setmethods__["select"] = _LayoutScript.element3d_select_set
    __swig_getmethods__["select"] = _LayoutScript.element3d_select_get
    if _newclass:
        select = _swig_property(_LayoutScript.element3d_select_get, _LayoutScript.element3d_select_set)

    def isCellref(self):
        return _LayoutScript.element3d_isCellref(self)

    def isMesh(self):
        return _LayoutScript.element3d_isMesh(self)

    def selectAll(self):
        return _LayoutScript.element3d_selectAll(self)

    def deselectAll(self):
        return _LayoutScript.element3d_deselectAll(self)

    def getLayer(self):
        return _LayoutScript.element3d_getLayer(self)

    def setLayer(self, arg2):
        return _LayoutScript.element3d_setLayer(self, arg2)

    def isVisible(self):
        return _LayoutScript.element3d_isVisible(self)

    def getColorRed(self):
        return _LayoutScript.element3d_getColorRed(self)

    def getColorGreen(self):
        return _LayoutScript.element3d_getColorGreen(self)

    def getColorBlue(self):
        return _LayoutScript.element3d_getColorBlue(self)

    def getName(self):
        return _LayoutScript.element3d_getName(self)

    def setName(self, arg2):
        return _LayoutScript.element3d_setName(self, arg2)
    __swig_destroy__ = _LayoutScript.delete_element3d
    __del__ = lambda self: None
element3d_swigregister = _LayoutScript.element3d_swigregister
element3d_swigregister(element3d)

class elementList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, elementList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, elementList, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_setmethods__["thisElement"] = _LayoutScript.elementList_thisElement_set
    __swig_getmethods__["thisElement"] = _LayoutScript.elementList_thisElement_get
    if _newclass:
        thisElement = _swig_property(_LayoutScript.elementList_thisElement_get, _LayoutScript.elementList_thisElement_set)
    __swig_setmethods__["nextElement"] = _LayoutScript.elementList_nextElement_set
    __swig_getmethods__["nextElement"] = _LayoutScript.elementList_nextElement_get
    if _newclass:
        nextElement = _swig_property(_LayoutScript.elementList_nextElement_get, _LayoutScript.elementList_nextElement_set)

    def firstOnLayer(self, layer):
        return _LayoutScript.elementList_firstOnLayer(self, layer)

    def nextOnLayer(self, layer):
        return _LayoutScript.elementList_nextOnLayer(self, layer)
    __swig_destroy__ = _LayoutScript.delete_elementList
    __del__ = lambda self: None
elementList_swigregister = _LayoutScript.elementList_swigregister
elementList_swigregister(elementList)

class elementList3d(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, elementList3d, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, elementList3d, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_setmethods__["nextElement"] = _LayoutScript.elementList3d_nextElement_set
    __swig_getmethods__["nextElement"] = _LayoutScript.elementList3d_nextElement_get
    if _newclass:
        nextElement = _swig_property(_LayoutScript.elementList3d_nextElement_get, _LayoutScript.elementList3d_nextElement_set)
    __swig_setmethods__["thisElement"] = _LayoutScript.elementList3d_thisElement_set
    __swig_getmethods__["thisElement"] = _LayoutScript.elementList3d_thisElement_get
    if _newclass:
        thisElement = _swig_property(_LayoutScript.elementList3d_thisElement_get, _LayoutScript.elementList3d_thisElement_set)
    __swig_destroy__ = _LayoutScript.delete_elementList3d
    __del__ = lambda self: None
elementList3d_swigregister = _LayoutScript.elementList3d_swigregister
elementList3d_swigregister(elementList3d)

class extractionModule(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, extractionModule, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, extractionModule, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def calcResistance(self, p, port1, port2):
        return _LayoutScript.extractionModule_calcResistance(self, p, port1, port2)

    def extractComponent(self, comp, lib):
        return _LayoutScript.extractionModule_extractComponent(self, comp, lib)

    def removeExtractedDevices(self):
        return _LayoutScript.extractionModule_removeExtractedDevices(self)

    def setDetailsResistance(self, arg2):
        return _LayoutScript.extractionModule_setDetailsResistance(self, arg2)

    def inductanceAddSelection(self):
        return _LayoutScript.extractionModule_inductanceAddSelection(self)

    def inductanceAdd(self, e, conductorNum):
        return _LayoutScript.extractionModule_inductanceAdd(self, e, conductorNum)

    def inductanceClear(self):
        return _LayoutScript.extractionModule_inductanceClear(self)

    def inductanceCalc(self, frequency=1000000):
        return _LayoutScript.extractionModule_inductanceCalc(self, frequency)

    def inductanceResult(self, con1, con2):
        return _LayoutScript.extractionModule_inductanceResult(self, con1, con2)
    __swig_destroy__ = _LayoutScript.delete_extractionModule
    __del__ = lambda self: None
extractionModule_swigregister = _LayoutScript.extractionModule_swigregister
extractionModule_swigregister(extractionModule)

class intList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, intList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, intList, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _LayoutScript.new_intList()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def append(self, d):
        return _LayoutScript.intList_append(self, d)

    def at(self, i):
        return _LayoutScript.intList_at(self, i)

    def contains(self, d):
        return _LayoutScript.intList_contains(self, d)

    def insert(self, pos, value):
        return _LayoutScript.intList_insert(self, pos, value)

    def indexOf(self, i, index=0):
        return _LayoutScript.intList_indexOf(self, i, index)

    def removeAll(self, d):
        return _LayoutScript.intList_removeAll(self, d)

    def removeAt(self, pos):
        return _LayoutScript.intList_removeAt(self, pos)

    def size(self):
        return _LayoutScript.intList_size(self)

    def set(self, i, d):
        return _LayoutScript.intList_set(self, i, d)

    def swap(self, pos1, pos2):
        return _LayoutScript.intList_swap(self, pos1, pos2)
    __swig_destroy__ = _LayoutScript.delete_intList
    __del__ = lambda self: None
intList_swigregister = _LayoutScript.intList_swigregister
intList_swigregister(intList)

class layer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, layer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, layer, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _LayoutScript.layer_name_set
    __swig_getmethods__["name"] = _LayoutScript.layer_name_get
    if _newclass:
        name = _swig_property(_LayoutScript.layer_name_get, _LayoutScript.layer_name_set)
    __swig_setmethods__["visible"] = _LayoutScript.layer_visible_set
    __swig_getmethods__["visible"] = _LayoutScript.layer_visible_get
    if _newclass:
        visible = _swig_property(_LayoutScript.layer_visible_get, _LayoutScript.layer_visible_set)

    def set3dView(self, level, thickness):
        return _LayoutScript.layer_set3dView(self, level, thickness)

    def get3dLevel(self):
        return _LayoutScript.layer_get3dLevel(self)

    def get3dThickness(self):
        return _LayoutScript.layer_get3dThickness(self)

    def enable(self):
        return _LayoutScript.layer_enable(self)

    def disable(self):
        return _LayoutScript.layer_disable(self)

    def setColor(self, *args):
        return _LayoutScript.layer_setColor(self, *args)

    def red(self):
        return _LayoutScript.layer_red(self)

    def green(self):
        return _LayoutScript.layer_green(self)

    def blue(self):
        return _LayoutScript.layer_blue(self)

    def setStyle(self, style):
        return _LayoutScript.layer_setStyle(self, style)

    def getStyle(self):
        return _LayoutScript.layer_getStyle(self)
    __swig_setmethods__["shortkey"] = _LayoutScript.layer_shortkey_set
    __swig_getmethods__["shortkey"] = _LayoutScript.layer_shortkey_get
    if _newclass:
        shortkey = _swig_property(_LayoutScript.layer_shortkey_get, _LayoutScript.layer_shortkey_set)
    __swig_setmethods__["mapToLayer"] = _LayoutScript.layer_mapToLayer_set
    __swig_getmethods__["mapToLayer"] = _LayoutScript.layer_mapToLayer_get
    if _newclass:
        mapToLayer = _swig_property(_LayoutScript.layer_mapToLayer_get, _LayoutScript.layer_mapToLayer_set)
    __swig_setmethods__["mapToDatatype"] = _LayoutScript.layer_mapToDatatype_set
    __swig_getmethods__["mapToDatatype"] = _LayoutScript.layer_mapToDatatype_get
    if _newclass:
        mapToDatatype = _swig_property(_LayoutScript.layer_mapToDatatype_get, _LayoutScript.layer_mapToDatatype_set)

    def isEnabled(self):
        return _LayoutScript.layer_isEnabled(self)

    def isConductor(self):
        return _LayoutScript.layer_isConductor(self)

    def isVia(self):
        return _LayoutScript.layer_isVia(self)

    def isVisible(self, datatype):
        return _LayoutScript.layer_isVisible(self, datatype)

    def setDatatypesVisible(self, start, stop):
        return _LayoutScript.layer_setDatatypesVisible(self, start, stop)

    def setDatatypesVisibleAll(self):
        return _LayoutScript.layer_setDatatypesVisibleAll(self)

    def setDatatypesInvisible(self, start, stop):
        return _LayoutScript.layer_setDatatypesInvisible(self, start, stop)
    __swig_destroy__ = _LayoutScript.delete_layer
    __del__ = lambda self: None
layer_swigregister = _LayoutScript.layer_swigregister
layer_swigregister(layer)

class layers(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, layers, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, layers, name)
    __repr__ = _swig_repr
    if _newclass:
        num = staticmethod(_LayoutScript.layers_num)
    else:
        num = _LayoutScript.layers_num
    __swig_setmethods__["displayedLayers"] = _LayoutScript.layers_displayedLayers_set
    __swig_getmethods__["displayedLayers"] = _LayoutScript.layers_displayedLayers_get
    if _newclass:
        displayedLayers = _swig_property(_LayoutScript.layers_displayedLayers_get, _LayoutScript.layers_displayedLayers_set)
    if _newclass:
        number = staticmethod(_LayoutScript.layers_number)
    else:
        number = _LayoutScript.layers_number
    if _newclass:
        findLayer = staticmethod(_LayoutScript.layers_findLayer)
    else:
        findLayer = _LayoutScript.layers_findLayer
    if _newclass:
        showAllLayer = staticmethod(_LayoutScript.layers_showAllLayer)
    else:
        showAllLayer = _LayoutScript.layers_showAllLayer
    if _newclass:
        hideAllLayer = staticmethod(_LayoutScript.layers_hideAllLayer)
    else:
        hideAllLayer = _LayoutScript.layers_hideAllLayer
    if _newclass:
        enableAllLayer = staticmethod(_LayoutScript.layers_enableAllLayer)
    else:
        enableAllLayer = _LayoutScript.layers_enableAllLayer
    if _newclass:
        disableAllLayer = staticmethod(_LayoutScript.layers_disableAllLayer)
    else:
        disableAllLayer = _LayoutScript.layers_disableAllLayer
    if _newclass:
        reset3dView = staticmethod(_LayoutScript.layers_reset3dView)
    else:
        reset3dView = _LayoutScript.layers_reset3dView
    if _newclass:
        layerMax = staticmethod(_LayoutScript.layers_layerMax)
    else:
        layerMax = _LayoutScript.layers_layerMax
    if _newclass:
        disableUnusedLayers = staticmethod(_LayoutScript.layers_disableUnusedLayers)
    else:
        disableUnusedLayers = _LayoutScript.layers_disableUnusedLayers
    if _newclass:
        hideUnusedLayers = staticmethod(_LayoutScript.layers_hideUnusedLayers)
    else:
        hideUnusedLayers = _LayoutScript.layers_hideUnusedLayers
    if _newclass:
        hideCurrentUnusedLayers = staticmethod(_LayoutScript.layers_hideCurrentUnusedLayers)
    else:
        hideCurrentUnusedLayers = _LayoutScript.layers_hideCurrentUnusedLayers
    if _newclass:
        technologyLevelFrom3d = staticmethod(_LayoutScript.layers_technologyLevelFrom3d)
    else:
        technologyLevelFrom3d = _LayoutScript.layers_technologyLevelFrom3d
    if _newclass:
        technologyLayerRemoveAll = staticmethod(_LayoutScript.layers_technologyLayerRemoveAll)
    else:
        technologyLayerRemoveAll = _LayoutScript.layers_technologyLayerRemoveAll
    if _newclass:
        technologyLayerAdd = staticmethod(_LayoutScript.layers_technologyLayerAdd)
    else:
        technologyLayerAdd = _LayoutScript.layers_technologyLayerAdd
    if _newclass:
        technologyLayerSetParameter = staticmethod(_LayoutScript.layers_technologyLayerSetParameter)
    else:
        technologyLayerSetParameter = _LayoutScript.layers_technologyLayerSetParameter
    if _newclass:
        technologyLayerGetParameter = staticmethod(_LayoutScript.layers_technologyLayerGetParameter)
    else:
        technologyLayerGetParameter = _LayoutScript.layers_technologyLayerGetParameter
    if _newclass:
        technologyLayerGetType = staticmethod(_LayoutScript.layers_technologyLayerGetType)
    else:
        technologyLayerGetType = _LayoutScript.layers_technologyLayerGetType
    if _newclass:
        technologyLayerConductorSpaceing = staticmethod(_LayoutScript.layers_technologyLayerConductorSpaceing)
    else:
        technologyLayerConductorSpaceing = _LayoutScript.layers_technologyLayerConductorSpaceing
    if _newclass:
        technologyLayerConductorSize = staticmethod(_LayoutScript.layers_technologyLayerConductorSize)
    else:
        technologyLayerConductorSize = _LayoutScript.layers_technologyLayerConductorSize
    if _newclass:
        maxLevel = staticmethod(_LayoutScript.layers_maxLevel)
    else:
        maxLevel = _LayoutScript.layers_maxLevel
    if _newclass:
        findLevel = staticmethod(_LayoutScript.layers_findLevel)
    else:
        findLevel = _LayoutScript.layers_findLevel
    if _newclass:
        globalVia = staticmethod(_LayoutScript.layers_globalVia)
    else:
        globalVia = _LayoutScript.layers_globalVia
    if _newclass:
        importLayerSettings = staticmethod(_LayoutScript.layers_importLayerSettings)
    else:
        importLayerSettings = _LayoutScript.layers_importLayerSettings

    def __init__(self):
        this = _LayoutScript.new_layers()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _LayoutScript.delete_layers
    __del__ = lambda self: None
layers_swigregister = _LayoutScript.layers_swigregister
layers_swigregister(layers)

def layers_num(arg2):
    return _LayoutScript.layers_num(arg2)
layers_num = _LayoutScript.layers_num
cvar = _LayoutScript.cvar

def layers_number(at):
    return _LayoutScript.layers_number(at)
layers_number = _LayoutScript.layers_number

def layers_findLayer(layerName):
    return _LayoutScript.layers_findLayer(layerName)
layers_findLayer = _LayoutScript.layers_findLayer

def layers_showAllLayer():
    return _LayoutScript.layers_showAllLayer()
layers_showAllLayer = _LayoutScript.layers_showAllLayer

def layers_hideAllLayer():
    return _LayoutScript.layers_hideAllLayer()
layers_hideAllLayer = _LayoutScript.layers_hideAllLayer

def layers_enableAllLayer():
    return _LayoutScript.layers_enableAllLayer()
layers_enableAllLayer = _LayoutScript.layers_enableAllLayer

def layers_disableAllLayer():
    return _LayoutScript.layers_disableAllLayer()
layers_disableAllLayer = _LayoutScript.layers_disableAllLayer

def layers_reset3dView():
    return _LayoutScript.layers_reset3dView()
layers_reset3dView = _LayoutScript.layers_reset3dView

def layers_layerMax():
    return _LayoutScript.layers_layerMax()
layers_layerMax = _LayoutScript.layers_layerMax

def layers_disableUnusedLayers(d):
    return _LayoutScript.layers_disableUnusedLayers(d)
layers_disableUnusedLayers = _LayoutScript.layers_disableUnusedLayers

def layers_hideUnusedLayers(d):
    return _LayoutScript.layers_hideUnusedLayers(d)
layers_hideUnusedLayers = _LayoutScript.layers_hideUnusedLayers

def layers_hideCurrentUnusedLayers(d):
    return _LayoutScript.layers_hideCurrentUnusedLayers(d)
layers_hideCurrentUnusedLayers = _LayoutScript.layers_hideCurrentUnusedLayers

def layers_technologyLevelFrom3d():
    return _LayoutScript.layers_technologyLevelFrom3d()
layers_technologyLevelFrom3d = _LayoutScript.layers_technologyLevelFrom3d

def layers_technologyLayerRemoveAll():
    return _LayoutScript.layers_technologyLayerRemoveAll()
layers_technologyLayerRemoveAll = _LayoutScript.layers_technologyLayerRemoveAll

def layers_technologyLayerAdd(layer, type):
    return _LayoutScript.layers_technologyLayerAdd(layer, type)
layers_technologyLayerAdd = _LayoutScript.layers_technologyLayerAdd

def layers_technologyLayerSetParameter(layer, parnum, value):
    return _LayoutScript.layers_technologyLayerSetParameter(layer, parnum, value)
layers_technologyLayerSetParameter = _LayoutScript.layers_technologyLayerSetParameter

def layers_technologyLayerGetParameter(layer, parnum):
    return _LayoutScript.layers_technologyLayerGetParameter(layer, parnum)
layers_technologyLayerGetParameter = _LayoutScript.layers_technologyLayerGetParameter

def layers_technologyLayerGetType(layer):
    return _LayoutScript.layers_technologyLayerGetType(layer)
layers_technologyLayerGetType = _LayoutScript.layers_technologyLayerGetType

def layers_technologyLayerConductorSpaceing(layer):
    return _LayoutScript.layers_technologyLayerConductorSpaceing(layer)
layers_technologyLayerConductorSpaceing = _LayoutScript.layers_technologyLayerConductorSpaceing

def layers_technologyLayerConductorSize(layer):
    return _LayoutScript.layers_technologyLayerConductorSize(layer)
layers_technologyLayerConductorSize = _LayoutScript.layers_technologyLayerConductorSize

def layers_maxLevel():
    return _LayoutScript.layers_maxLevel()
layers_maxLevel = _LayoutScript.layers_maxLevel

def layers_findLevel(i):
    return _LayoutScript.layers_findLevel(i)
layers_findLevel = _LayoutScript.layers_findLevel

def layers_globalVia():
    return _LayoutScript.layers_globalVia()
layers_globalVia = _LayoutScript.layers_globalVia

def layers_importLayerSettings(filename):
    return _LayoutScript.layers_importLayerSettings(filename)
layers_importLayerSettings = _LayoutScript.layers_importLayerSettings

class layerTranslator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, layerTranslator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, layerTranslator, name)
    __repr__ = _swig_repr

    def mapAll(self, to):
        return _LayoutScript.layerTranslator_mapAll(self, to)

    def map(self, arg2):
        return _LayoutScript.layerTranslator_map(self, arg2)

    def mapLayer(self, arg2, to):
        return _LayoutScript.layerTranslator_mapLayer(self, arg2, to)

    def invert(self):
        return _LayoutScript.layerTranslator_invert(self)

    def clear(self):
        return _LayoutScript.layerTranslator_clear(self)

    def __init__(self):
        this = _LayoutScript.new_layerTranslator()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _LayoutScript.delete_layerTranslator
    __del__ = lambda self: None
layerTranslator_swigregister = _LayoutScript.layerTranslator_swigregister
layerTranslator_swigregister(layerTranslator)

class layout(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, layout, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, layout, name)
    __repr__ = _swig_repr
    __swig_setmethods__["backgroundTool"] = _LayoutScript.layout_backgroundTool_set
    __swig_getmethods__["backgroundTool"] = _LayoutScript.layout_backgroundTool_get
    if _newclass:
        backgroundTool = _swig_property(_LayoutScript.layout_backgroundTool_get, _LayoutScript.layout_backgroundTool_set)
    __swig_setmethods__["barcodeTool"] = _LayoutScript.layout_barcodeTool_set
    __swig_getmethods__["barcodeTool"] = _LayoutScript.layout_barcodeTool_get
    if _newclass:
        barcodeTool = _swig_property(_LayoutScript.layout_barcodeTool_get, _LayoutScript.layout_barcodeTool_set)
    __swig_setmethods__["booleanTool"] = _LayoutScript.layout_booleanTool_set
    __swig_getmethods__["booleanTool"] = _LayoutScript.layout_booleanTool_get
    if _newclass:
        booleanTool = _swig_property(_LayoutScript.layout_booleanTool_get, _LayoutScript.layout_booleanTool_set)

    def closeDesign(self):
        return _LayoutScript.layout_closeDesign(self)

    def choose(self):
        return _LayoutScript.layout_choose(self)

    def chooseImport(self):
        return _LayoutScript.layout_chooseImport(self)
    __swig_setmethods__["debug"] = _LayoutScript.layout_debug_set
    __swig_getmethods__["debug"] = _LayoutScript.layout_debug_get
    if _newclass:
        debug = _swig_property(_LayoutScript.layout_debug_get, _LayoutScript.layout_debug_set)
    __swig_setmethods__["drawing"] = _LayoutScript.layout_drawing_set
    __swig_getmethods__["drawing"] = _LayoutScript.layout_drawing_get
    if _newclass:
        drawing = _swig_property(_LayoutScript.layout_drawing_get, _LayoutScript.layout_drawing_set)
    __swig_setmethods__["drcTool"] = _LayoutScript.layout_drcTool_set
    __swig_getmethods__["drcTool"] = _LayoutScript.layout_drcTool_get
    if _newclass:
        drcTool = _swig_property(_LayoutScript.layout_drcTool_get, _LayoutScript.layout_drcTool_set)

    def executeMacro(self, *args):
        return _LayoutScript.layout_executeMacro(self, *args)
    __swig_setmethods__["extractionTool"] = _LayoutScript.layout_extractionTool_set
    __swig_getmethods__["extractionTool"] = _LayoutScript.layout_extractionTool_get
    if _newclass:
        extractionTool = _swig_property(_LayoutScript.layout_extractionTool_get, _LayoutScript.layout_extractionTool_set)
    __swig_setmethods__["filename"] = _LayoutScript.layout_filename_set
    __swig_getmethods__["filename"] = _LayoutScript.layout_filename_get
    if _newclass:
        filename = _swig_property(_LayoutScript.layout_filename_get, _LayoutScript.layout_filename_set)

    def getBool(self, caption, label):
        return _LayoutScript.layout_getBool(self, caption, label)

    def getText(self, *args):
        return _LayoutScript.layout_getText(self, *args)

    def getItem(self, caption, lable, values):
        return _LayoutScript.layout_getItem(self, caption, lable, values)

    def getInteger(self, caption, lable, value=0):
        return _LayoutScript.layout_getInteger(self, caption, lable, value)

    def getSize(self, caption, lable, value=1):
        return _LayoutScript.layout_getSize(self, caption, lable, value)

    def getLayer(self, lable, value=0):
        return _LayoutScript.layout_getLayer(self, lable, value)

    def getDouble(self, caption, lable, value=0, digits=1):
        return _LayoutScript.layout_getDouble(self, caption, lable, value, digits)

    def getOpenFilename(self, *args):
        return _LayoutScript.layout_getOpenFilename(self, *args)

    def getSaveFilename(self, *args):
        return _LayoutScript.layout_getSaveFilename(self, *args)

    def getDirectory(self, *args):
        return _LayoutScript.layout_getDirectory(self, *args)

    def getStatistic(self):
        return _LayoutScript.layout_getStatistic(self)

    def getToolbarState(self):
        return _LayoutScript.layout_getToolbarState(self)

    def getVersion(self):
        return _LayoutScript.layout_getVersion(self)

    def hideToolBar(self, name):
        return _LayoutScript.layout_hideToolBar(self, name)

    def menuAdd(self, name, entries):
        return _LayoutScript.layout_menuAdd(self, name, entries)
    __swig_setmethods__["netlistTool"] = _LayoutScript.layout_netlistTool_set
    __swig_getmethods__["netlistTool"] = _LayoutScript.layout_netlistTool_get
    if _newclass:
        netlistTool = _swig_property(_LayoutScript.layout_netlistTool_get, _LayoutScript.layout_netlistTool_set)

    def open(self, fileName):
        return _LayoutScript.layout_open(self, fileName)

    def _print(self):
        return _LayoutScript.layout__print(self)

    def save(self):
        return _LayoutScript.layout_save(self)

    def saveAs(self):
        return _LayoutScript.layout_saveAs(self)

    def screenshot(self):
        return _LayoutScript.layout_screenshot(self)

    def setCell(self):
        return _LayoutScript.layout_setCell(self)

    def setCellname(self):
        return _LayoutScript.layout_setCellname(self)

    def setMenuEnabled(self, name, b):
        return _LayoutScript.layout_setMenuEnabled(self, name, b)

    def setToolbarEnabled(self, name, b):
        return _LayoutScript.layout_setToolbarEnabled(self, name, b)

    def setSnapToGrid(self, b):
        return _LayoutScript.layout_setSnapToGrid(self, b)

    def setSnapToPoint(self, b):
        return _LayoutScript.layout_setSnapToPoint(self, b)

    def setSnapToMiddle(self, b):
        return _LayoutScript.layout_setSnapToMiddle(self, b)

    def setSnapToLine(self, b):
        return _LayoutScript.layout_setSnapToLine(self, b)

    def setSnapToCenter(self, b):
        return _LayoutScript.layout_setSnapToCenter(self, b)

    def setSnapToIntersection(self, b):
        return _LayoutScript.layout_setSnapToIntersection(self, b)

    def setToolbarState(self, arg2):
        return _LayoutScript.layout_setToolbarState(self, arg2)

    def setShortcut(self, *args):
        return _LayoutScript.layout_setShortcut(self, *args)

    def showMessage(self, caption, label):
        return _LayoutScript.layout_showMessage(self, caption, label)

    def showStatus(self, lable):
        return _LayoutScript.layout_showStatus(self, lable)

    def showToolBar(self, name):
        return _LayoutScript.layout_showToolBar(self, name)

    def showTextEditor(self):
        return _LayoutScript.layout_showTextEditor(self)

    def toolBarAdd(self, name, buttons):
        return _LayoutScript.layout_toolBarAdd(self, name, buttons)
    __swig_setmethods__["view3dTool"] = _LayoutScript.layout_view3dTool_set
    __swig_getmethods__["view3dTool"] = _LayoutScript.layout_view3dTool_get
    if _newclass:
        view3dTool = _swig_property(_LayoutScript.layout_view3dTool_get, _LayoutScript.layout_view3dTool_set)

    def setLayerSorting(self, arg2):
        return _LayoutScript.layout_setLayerSorting(self, arg2)

    def getView(self):
        return _LayoutScript.layout_getView(self)

    def saveScreenshot(self, filename):
        return _LayoutScript.layout_saveScreenshot(self, filename)

    def group(self):
        return _LayoutScript.layout_group(self)

    def deleteActuellCell(self):
        return _LayoutScript.layout_deleteActuellCell(self)

    def newCell(self):
        return _LayoutScript.layout_newCell(self)

    def __init__(self):
        this = _LayoutScript.new_layout()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _LayoutScript.delete_layout
    __del__ = lambda self: None
layout_swigregister = _LayoutScript.layout_swigregister
layout_swigregister(layout)

class layout3d(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, layout3d, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, layout3d, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_setmethods__["filename"] = _LayoutScript.layout3d_filename_set
    __swig_getmethods__["filename"] = _LayoutScript.layout3d_filename_get
    if _newclass:
        filename = _swig_property(_LayoutScript.layout3d_filename_get, _LayoutScript.layout3d_filename_set)
    __swig_setmethods__["drawing"] = _LayoutScript.layout3d_drawing_set
    __swig_getmethods__["drawing"] = _LayoutScript.layout3d_drawing_get
    if _newclass:
        drawing = _swig_property(_LayoutScript.layout3d_drawing_get, _LayoutScript.layout3d_drawing_set)

    def closeDesign(self):
        return _LayoutScript.layout3d_closeDesign(self)
    __swig_destroy__ = _LayoutScript.delete_layout3d
    __del__ = lambda self: None
layout3d_swigregister = _LayoutScript.layout3d_swigregister
layout3d_swigregister(layout3d)

class netList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, netList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, netList, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_setmethods__["cellname"] = _LayoutScript.netList_cellname_set
    __swig_getmethods__["cellname"] = _LayoutScript.netList_cellname_get
    if _newclass:
        cellname = _swig_property(_LayoutScript.netList_cellname_get, _LayoutScript.netList_cellname_set)

    def getExternalNodes(self):
        return _LayoutScript.netList_getExternalNodes(self)

    def getNodes(self):
        return _LayoutScript.netList_getNodes(self)

    def getNode(self, node):
        return _LayoutScript.netList_getNode(self, node)

    def devicesCount(self):
        return _LayoutScript.netList_devicesCount(self)

    def getDevice(self, num):
        return _LayoutScript.netList_getDevice(self, num)
    __swig_destroy__ = _LayoutScript.delete_netList
    __del__ = lambda self: None
netList_swigregister = _LayoutScript.netList_swigregister
netList_swigregister(netList)

class netListDevice(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, netListDevice, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, netListDevice, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_setmethods__["devicename"] = _LayoutScript.netListDevice_devicename_set
    __swig_getmethods__["devicename"] = _LayoutScript.netListDevice_devicename_get
    if _newclass:
        devicename = _swig_property(_LayoutScript.netListDevice_devicename_get, _LayoutScript.netListDevice_devicename_set)
    __swig_setmethods__["cellname"] = _LayoutScript.netListDevice_cellname_set
    __swig_getmethods__["cellname"] = _LayoutScript.netListDevice_cellname_get
    if _newclass:
        cellname = _swig_property(_LayoutScript.netListDevice_cellname_get, _LayoutScript.netListDevice_cellname_set)

    def connectionsCount(self):
        return _LayoutScript.netListDevice_connectionsCount(self)

    def getConnectionNames(self):
        return _LayoutScript.netListDevice_getConnectionNames(self)

    def getNode(self, pin):
        return _LayoutScript.netListDevice_getNode(self, pin)
    __swig_destroy__ = _LayoutScript.delete_netListDevice
    __del__ = lambda self: None
netListDevice_swigregister = _LayoutScript.netListDevice_swigregister
netListDevice_swigregister(netListDevice)

class netListModule(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, netListModule, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, netListModule, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def libraryAdd(self, fileName):
        return _LayoutScript.netListModule_libraryAdd(self, fileName)

    def getLibrary(self):
        return _LayoutScript.netListModule_getLibrary(self)

    def libraryRemoveAll(self):
        return _LayoutScript.netListModule_libraryRemoveAll(self)

    def technologyLayerRemoveAll(self):
        return _LayoutScript.netListModule_technologyLayerRemoveAll(self)

    def technologyLayerAdd(self, layer, type):
        return _LayoutScript.netListModule_technologyLayerAdd(self, layer, type)

    def technologyLayerSetParameter(self, layer, parnum, value):
        return _LayoutScript.netListModule_technologyLayerSetParameter(self, layer, parnum, value)

    def technologyLayerConductorSpaceing(self, layer):
        return _LayoutScript.netListModule_technologyLayerConductorSpaceing(self, layer)

    def technologyLayerConductorSize(self, layer):
        return _LayoutScript.netListModule_technologyLayerConductorSize(self, layer)

    def netlistLoad(self, filename):
        return _LayoutScript.netListModule_netlistLoad(self, filename)

    def netlistSave(self, filename, type):
        return _LayoutScript.netListModule_netlistSave(self, filename, type)

    def saveNetlist(self, netl, filename, type):
        return _LayoutScript.netListModule_saveNetlist(self, netl, filename, type)

    def addLVSList(self, text, job):
        return _LayoutScript.netListModule_addLVSList(self, text, job)

    def clearLVSList(self):
        return _LayoutScript.netListModule_clearLVSList(self)

    def lvs(self):
        return _LayoutScript.netListModule_lvs(self)

    def layoutVersusSchematic(self):
        return _LayoutScript.netListModule_layoutVersusSchematic(self)

    def layoutVersusNetlist(self):
        return _LayoutScript.netListModule_layoutVersusNetlist(self)

    def getLVSResults(self):
        return _LayoutScript.netListModule_getLVSResults(self)

    def extractedNetlistSave(self, filename, type):
        return _LayoutScript.netListModule_extractedNetlistSave(self, filename, type)

    def buildConnect(self):
        return _LayoutScript.netListModule_buildConnect(self)

    def editExtractedNetList(self):
        return _LayoutScript.netListModule_editExtractedNetList(self)

    def getLoadedNetList(self, cellname):
        return _LayoutScript.netListModule_getLoadedNetList(self, cellname)

    def getSchematicNetList(self, cellname):
        return _LayoutScript.netListModule_getSchematicNetList(self, cellname)

    def getExtracatedNetList(self, cellname):
        return _LayoutScript.netListModule_getExtracatedNetList(self, cellname)

    def getExtractedNetList(self, cellname):
        return _LayoutScript.netListModule_getExtractedNetList(self, cellname)

    def extractNetList(self):
        return _LayoutScript.netListModule_extractNetList(self)

    def autoPlace(self, placeDigital, placeAnalog, srLayer, analogDistance):
        return _LayoutScript.netListModule_autoPlace(self, placeDigital, placeAnalog, srLayer, analogDistance)

    def autoRoute(self):
        return _LayoutScript.netListModule_autoRoute(self)

    def placeDevice(self, *args):
        return _LayoutScript.netListModule_placeDevice(self, *args)
    __swig_destroy__ = _LayoutScript.delete_netListModule
    __del__ = lambda self: None
netListModule_swigregister = _LayoutScript.netListModule_swigregister
netListModule_swigregister(netListModule)

class plotData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, plotData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, plotData, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _LayoutScript.delete_plotData
    __del__ = lambda self: None
plotData_swigregister = _LayoutScript.plotData_swigregister
plotData_swigregister(plotData)

class point(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, point, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, point, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _LayoutScript.delete_point
    __del__ = lambda self: None

    def x(self):
        return _LayoutScript.point_x(self)

    def y(self):
        return _LayoutScript.point_y(self)

    def length(self):
        return _LayoutScript.point_length(self)

    def distanceTo(self, p2):
        return _LayoutScript.point_distanceTo(self, p2)

    def distanceToLine(self, p1, p2):
        return _LayoutScript.point_distanceToLine(self, p1, p2)

    def distanceToLineAbs(self, p1, p2):
        return _LayoutScript.point_distanceToLineAbs(self, p1, p2)

    def __init__(self, *args):
        this = _LayoutScript.new_point(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def set(self, *args):
        return _LayoutScript.point_set(self, *args)

    def setX(self, *args):
        return _LayoutScript.point_setX(self, *args)

    def setY(self, *args):
        return _LayoutScript.point_setY(self, *args)

    def __str__(self):
        return _LayoutScript.point___str__(self)

    def __eq__(self, p2):
        return _LayoutScript.point___eq__(self, p2)

    def __ne__(self, p2):
        return _LayoutScript.point___ne__(self, p2)

    def __add__(self, p2):
        return _LayoutScript.point___add__(self, p2)

    def __sub__(self, p2):
        return _LayoutScript.point___sub__(self, p2)
point_swigregister = _LayoutScript.point_swigregister
point_swigregister(point)

class pointArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pointArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pointArray, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _LayoutScript.new_pointArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _LayoutScript.delete_pointArray
    __del__ = lambda self: None

    def addCornerArea(self, value1, value2, angleInt=0):
        return _LayoutScript.pointArray_addCornerArea(self, value1, value2, angleInt)

    def attachPoint(self, p):
        return _LayoutScript.pointArray_attachPoint(self, p)

    def append(self, p):
        return _LayoutScript.pointArray_append(self, p)

    def centerOfGavity(self):
        return _LayoutScript.pointArray_centerOfGavity(self)

    def centerOfGravity(self):
        return _LayoutScript.pointArray_centerOfGravity(self)

    def chamfer(self, value, type, angleInt=0):
        return _LayoutScript.pointArray_chamfer(self, value, type, angleInt)

    def filletRound(self, value, type, angleInt=0):
        return _LayoutScript.pointArray_filletRound(self, value, type, angleInt)

    def filletBezier(self, value, type, angleInt=0):
        return _LayoutScript.pointArray_filletBezier(self, value, type, angleInt)

    def flip(self):
        return _LayoutScript.pointArray_flip(self)

    def insert(self, i, p):
        return _LayoutScript.pointArray_insert(self, i, p)

    def point(self, i):
        return _LayoutScript.pointArray_point(self, i)

    def resize(self, size):
        return _LayoutScript.pointArray_resize(self, size)

    def setPoint(self, i, p):
        return _LayoutScript.pointArray_setPoint(self, i, p)

    def size(self):
        return _LayoutScript.pointArray_size(self)

    def center(self):
        return _LayoutScript.pointArray_center(self)

    def minimum(self):
        return _LayoutScript.pointArray_minimum(self)

    def maximum(self):
        return _LayoutScript.pointArray_maximum(self)

    def BSpline(self):
        return _LayoutScript.pointArray_BSpline(self)
    if _newclass:
        spirale = staticmethod(_LayoutScript.pointArray_spirale)
    else:
        spirale = _LayoutScript.pointArray_spirale
    if _newclass:
        coil = staticmethod(_LayoutScript.pointArray_coil)
    else:
        coil = _LayoutScript.pointArray_coil
    if _newclass:
        circle = staticmethod(_LayoutScript.pointArray_circle)
    else:
        circle = _LayoutScript.pointArray_circle
    if _newclass:
        ellipse = staticmethod(_LayoutScript.pointArray_ellipse)
    else:
        ellipse = _LayoutScript.pointArray_ellipse
    if _newclass:
        bezier2 = staticmethod(_LayoutScript.pointArray_bezier2)
    else:
        bezier2 = _LayoutScript.pointArray_bezier2
    if _newclass:
        bezier3 = staticmethod(_LayoutScript.pointArray_bezier3)
    else:
        bezier3 = _LayoutScript.pointArray_bezier3

    def set(self, *args):
        return _LayoutScript.pointArray_set(self, *args)

    def attach(self, *args):
        return _LayoutScript.pointArray_attach(self, *args)

    def __eq__(self, p2):
        return _LayoutScript.pointArray___eq__(self, p2)

    def __ne__(self, p2):
        return _LayoutScript.pointArray___ne__(self, p2)
pointArray_swigregister = _LayoutScript.pointArray_swigregister
pointArray_swigregister(pointArray)

def pointArray_spirale(center, p1, p2, angelstep):
    return _LayoutScript.pointArray_spirale(center, p1, p2, angelstep)
pointArray_spirale = _LayoutScript.pointArray_spirale

def pointArray_coil(center, p1, p2, turns, angelstep):
    return _LayoutScript.pointArray_coil(center, p1, p2, turns, angelstep)
pointArray_coil = _LayoutScript.pointArray_coil

def pointArray_circle(center, radius, angelstep):
    return _LayoutScript.pointArray_circle(center, radius, angelstep)
pointArray_circle = _LayoutScript.pointArray_circle

def pointArray_ellipse(center, rx, ry, angelstep):
    return _LayoutScript.pointArray_ellipse(center, rx, ry, angelstep)
pointArray_ellipse = _LayoutScript.pointArray_ellipse

def pointArray_bezier2(pstart, pend, pbezier, maxDepth=-2):
    return _LayoutScript.pointArray_bezier2(pstart, pend, pbezier, maxDepth)
pointArray_bezier2 = _LayoutScript.pointArray_bezier2

def pointArray_bezier3(pstart, pend, pbezierstart, pbezierend, maxDepth=-2):
    return _LayoutScript.pointArray_bezier3(pstart, pend, pbezierstart, pbezierend, maxDepth)
pointArray_bezier3 = _LayoutScript.pointArray_bezier3

class project(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, project, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, project, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    if _newclass:
        closeLayout = staticmethod(_LayoutScript.project_closeLayout)
    else:
        closeLayout = _LayoutScript.project_closeLayout
    if _newclass:
        closeLayout3d = staticmethod(_LayoutScript.project_closeLayout3d)
    else:
        closeLayout3d = _LayoutScript.project_closeLayout3d
    if _newclass:
        closeSchematic = staticmethod(_LayoutScript.project_closeSchematic)
    else:
        closeSchematic = _LayoutScript.project_closeSchematic
    __swig_setmethods__["defaultGui"] = _LayoutScript.project_defaultGui_set
    __swig_getmethods__["defaultGui"] = _LayoutScript.project_defaultGui_get
    if _newclass:
        defaultGui = _swig_property(_LayoutScript.project_defaultGui_get, _LayoutScript.project_defaultGui_set)
    if _newclass:
        getCentralTextEditor = staticmethod(_LayoutScript.project_getCentralTextEditor)
    else:
        getCentralTextEditor = _LayoutScript.project_getCentralTextEditor
    if _newclass:
        getLayout = staticmethod(_LayoutScript.project_getLayout)
    else:
        getLayout = _LayoutScript.project_getLayout
    if _newclass:
        getLayout3d = staticmethod(_LayoutScript.project_getLayout3d)
    else:
        getLayout3d = _LayoutScript.project_getLayout3d
    if _newclass:
        getOpenTextEditor = staticmethod(_LayoutScript.project_getOpenTextEditor)
    else:
        getOpenTextEditor = _LayoutScript.project_getOpenTextEditor
    if _newclass:
        getSchematic = staticmethod(_LayoutScript.project_getSchematic)
    else:
        getSchematic = _LayoutScript.project_getSchematic
    if _newclass:
        hasSchematic = staticmethod(_LayoutScript.project_hasSchematic)
    else:
        hasSchematic = _LayoutScript.project_hasSchematic
    if _newclass:
        newLayout = staticmethod(_LayoutScript.project_newLayout)
    else:
        newLayout = _LayoutScript.project_newLayout
    if _newclass:
        newSchematic = staticmethod(_LayoutScript.project_newSchematic)
    else:
        newSchematic = _LayoutScript.project_newSchematic
    __swig_destroy__ = _LayoutScript.delete_project
    __del__ = lambda self: None
project_swigregister = _LayoutScript.project_swigregister
project_swigregister(project)

def project_closeLayout(l):
    return _LayoutScript.project_closeLayout(l)
project_closeLayout = _LayoutScript.project_closeLayout

def project_closeLayout3d(l):
    return _LayoutScript.project_closeLayout3d(l)
project_closeLayout3d = _LayoutScript.project_closeLayout3d

def project_closeSchematic(s):
    return _LayoutScript.project_closeSchematic(s)
project_closeSchematic = _LayoutScript.project_closeSchematic

def project_getCentralTextEditor():
    return _LayoutScript.project_getCentralTextEditor()
project_getCentralTextEditor = _LayoutScript.project_getCentralTextEditor

def project_getLayout(s):
    return _LayoutScript.project_getLayout(s)
project_getLayout = _LayoutScript.project_getLayout

def project_getLayout3d(l):
    return _LayoutScript.project_getLayout3d(l)
project_getLayout3d = _LayoutScript.project_getLayout3d

def project_getOpenTextEditor():
    return _LayoutScript.project_getOpenTextEditor()
project_getOpenTextEditor = _LayoutScript.project_getOpenTextEditor

def project_getSchematic(lay):
    return _LayoutScript.project_getSchematic(lay)
project_getSchematic = _LayoutScript.project_getSchematic

def project_hasSchematic(lay):
    return _LayoutScript.project_hasSchematic(lay)
project_hasSchematic = _LayoutScript.project_hasSchematic

def project_newLayout():
    return _LayoutScript.project_newLayout()
project_newLayout = _LayoutScript.project_newLayout

def project_newSchematic():
    return _LayoutScript.project_newSchematic()
project_newSchematic = _LayoutScript.project_newSchematic

class rect(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, rect, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, rect, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _LayoutScript.new_rect(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def width(self):
        return _LayoutScript.rect_width(self)

    def height(self):
        return _LayoutScript.rect_height(self)

    def left(self):
        return _LayoutScript.rect_left(self)

    def right(self):
        return _LayoutScript.rect_right(self)

    def top(self):
        return _LayoutScript.rect_top(self)

    def bottom(self):
        return _LayoutScript.rect_bottom(self)

    def set(self, *args):
        return _LayoutScript.rect_set(self, *args)

    def setLeft(self, *args):
        return _LayoutScript.rect_setLeft(self, *args)

    def setRight(self, *args):
        return _LayoutScript.rect_setRight(self, *args)

    def setTop(self, *args):
        return _LayoutScript.rect_setTop(self, *args)

    def setBottom(self, *args):
        return _LayoutScript.rect_setBottom(self, *args)

    def __eq__(self, p2):
        return _LayoutScript.rect___eq__(self, p2)

    def __ne__(self, p2):
        return _LayoutScript.rect___ne__(self, p2)
    __swig_destroy__ = _LayoutScript.delete_rect
    __del__ = lambda self: None
rect_swigregister = _LayoutScript.rect_swigregister
rect_swigregister(rect)

class process(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, process, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, process, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    if _newclass:
        execute = staticmethod(_LayoutScript.process_execute)
    else:
        execute = _LayoutScript.process_execute
    if _newclass:
        executeTcl = staticmethod(_LayoutScript.process_executeTcl)
    else:
        executeTcl = _LayoutScript.process_executeTcl
    if _newclass:
        startDetached = staticmethod(_LayoutScript.process_startDetached)
    else:
        startDetached = _LayoutScript.process_startDetached
    if _newclass:
        getEnv = staticmethod(_LayoutScript.process_getEnv)
    else:
        getEnv = _LayoutScript.process_getEnv
    if _newclass:
        setEnv = staticmethod(_LayoutScript.process_setEnv)
    else:
        setEnv = _LayoutScript.process_setEnv
    if _newclass:
        externalTool = staticmethod(_LayoutScript.process_externalTool)
    else:
        externalTool = _LayoutScript.process_externalTool
    if _newclass:
        toolResult = staticmethod(_LayoutScript.process_toolResult)
    else:
        toolResult = _LayoutScript.process_toolResult
    if _newclass:
        isMac = staticmethod(_LayoutScript.process_isMac)
    else:
        isMac = _LayoutScript.process_isMac
    if _newclass:
        isWindows = staticmethod(_LayoutScript.process_isWindows)
    else:
        isWindows = _LayoutScript.process_isWindows
    if _newclass:
        isLinux = staticmethod(_LayoutScript.process_isLinux)
    else:
        isLinux = _LayoutScript.process_isLinux
    if _newclass:
        openBrowser = staticmethod(_LayoutScript.process_openBrowser)
    else:
        openBrowser = _LayoutScript.process_openBrowser
    __swig_destroy__ = _LayoutScript.delete_process
    __del__ = lambda self: None
process_swigregister = _LayoutScript.process_swigregister
process_swigregister(process)

def process_execute(command, arguments):
    return _LayoutScript.process_execute(command, arguments)
process_execute = _LayoutScript.process_execute

def process_executeTcl(command):
    return _LayoutScript.process_executeTcl(command)
process_executeTcl = _LayoutScript.process_executeTcl

def process_startDetached(command, arguments):
    return _LayoutScript.process_startDetached(command, arguments)
process_startDetached = _LayoutScript.process_startDetached

def process_getEnv(parameter):
    return _LayoutScript.process_getEnv(parameter)
process_getEnv = _LayoutScript.process_getEnv

def process_setEnv(parameter, value):
    return _LayoutScript.process_setEnv(parameter, value)
process_setEnv = _LayoutScript.process_setEnv

def process_externalTool(path, name, parameter, callback):
    return _LayoutScript.process_externalTool(path, name, parameter, callback)
process_externalTool = _LayoutScript.process_externalTool

def process_toolResult():
    return _LayoutScript.process_toolResult()
process_toolResult = _LayoutScript.process_toolResult

def process_isMac():
    return _LayoutScript.process_isMac()
process_isMac = _LayoutScript.process_isMac

def process_isWindows():
    return _LayoutScript.process_isWindows()
process_isWindows = _LayoutScript.process_isWindows

def process_isLinux():
    return _LayoutScript.process_isLinux()
process_isLinux = _LayoutScript.process_isLinux

def process_openBrowser(url):
    return _LayoutScript.process_openBrowser(url)
process_openBrowser = _LayoutScript.process_openBrowser

class setup(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, setup, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, setup, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mouseView"] = _LayoutScript.setup_mouseView_set
    __swig_getmethods__["mouseView"] = _LayoutScript.setup_mouseView_get
    if _newclass:
        mouseView = _swig_property(_LayoutScript.setup_mouseView_get, _LayoutScript.setup_mouseView_set)
    __swig_setmethods__["showReport"] = _LayoutScript.setup_showReport_set
    __swig_getmethods__["showReport"] = _LayoutScript.setup_showReport_get
    if _newclass:
        showReport = _swig_property(_LayoutScript.setup_showReport_get, _LayoutScript.setup_showReport_set)
    __swig_setmethods__["autosaveTime"] = _LayoutScript.setup_autosaveTime_set
    __swig_getmethods__["autosaveTime"] = _LayoutScript.setup_autosaveTime_get
    if _newclass:
        autosaveTime = _swig_property(_LayoutScript.setup_autosaveTime_get, _LayoutScript.setup_autosaveTime_set)
    __swig_setmethods__["showSnap"] = _LayoutScript.setup_showSnap_set
    __swig_getmethods__["showSnap"] = _LayoutScript.setup_showSnap_get
    if _newclass:
        showSnap = _swig_property(_LayoutScript.setup_showSnap_get, _LayoutScript.setup_showSnap_set)
    __swig_setmethods__["showGrid"] = _LayoutScript.setup_showGrid_set
    __swig_getmethods__["showGrid"] = _LayoutScript.setup_showGrid_get
    if _newclass:
        showGrid = _swig_property(_LayoutScript.setup_showGrid_get, _LayoutScript.setup_showGrid_set)
    __swig_setmethods__["showScale"] = _LayoutScript.setup_showScale_set
    __swig_getmethods__["showScale"] = _LayoutScript.setup_showScale_get
    if _newclass:
        showScale = _swig_property(_LayoutScript.setup_showScale_get, _LayoutScript.setup_showScale_set)
    __swig_setmethods__["font"] = _LayoutScript.setup_font_set
    __swig_getmethods__["font"] = _LayoutScript.setup_font_get
    if _newclass:
        font = _swig_property(_LayoutScript.setup_font_get, _LayoutScript.setup_font_set)
    __swig_setmethods__["fontIteration"] = _LayoutScript.setup_fontIteration_set
    __swig_getmethods__["fontIteration"] = _LayoutScript.setup_fontIteration_get
    if _newclass:
        fontIteration = _swig_property(_LayoutScript.setup_fontIteration_get, _LayoutScript.setup_fontIteration_set)
    __swig_setmethods__["fontSize"] = _LayoutScript.setup_fontSize_set
    __swig_getmethods__["fontSize"] = _LayoutScript.setup_fontSize_get
    if _newclass:
        fontSize = _swig_property(_LayoutScript.setup_fontSize_get, _LayoutScript.setup_fontSize_set)
    __swig_setmethods__["displayCellName"] = _LayoutScript.setup_displayCellName_set
    __swig_getmethods__["displayCellName"] = _LayoutScript.setup_displayCellName_get
    if _newclass:
        displayCellName = _swig_property(_LayoutScript.setup_displayCellName_get, _LayoutScript.setup_displayCellName_set)
    __swig_setmethods__["displayCells"] = _LayoutScript.setup_displayCells_set
    __swig_getmethods__["displayCells"] = _LayoutScript.setup_displayCells_get
    if _newclass:
        displayCells = _swig_property(_LayoutScript.setup_displayCells_get, _LayoutScript.setup_displayCells_set)
    __swig_setmethods__["displayCellOrigin"] = _LayoutScript.setup_displayCellOrigin_set
    __swig_getmethods__["displayCellOrigin"] = _LayoutScript.setup_displayCellOrigin_get
    if _newclass:
        displayCellOrigin = _swig_property(_LayoutScript.setup_displayCellOrigin_get, _LayoutScript.setup_displayCellOrigin_set)
    __swig_setmethods__["ignoreTextTrans"] = _LayoutScript.setup_ignoreTextTrans_set
    __swig_getmethods__["ignoreTextTrans"] = _LayoutScript.setup_ignoreTextTrans_get
    if _newclass:
        ignoreTextTrans = _swig_property(_LayoutScript.setup_ignoreTextTrans_get, _LayoutScript.setup_ignoreTextTrans_set)
    __swig_setmethods__["displayText"] = _LayoutScript.setup_displayText_set
    __swig_getmethods__["displayText"] = _LayoutScript.setup_displayText_get
    if _newclass:
        displayText = _swig_property(_LayoutScript.setup_displayText_get, _LayoutScript.setup_displayText_set)
    __swig_setmethods__["displayCellSingleLayer"] = _LayoutScript.setup_displayCellSingleLayer_set
    __swig_getmethods__["displayCellSingleLayer"] = _LayoutScript.setup_displayCellSingleLayer_get
    if _newclass:
        displayCellSingleLayer = _swig_property(_LayoutScript.setup_displayCellSingleLayer_get, _LayoutScript.setup_displayCellSingleLayer_set)
    __swig_setmethods__["layerDockStyle"] = _LayoutScript.setup_layerDockStyle_set
    __swig_getmethods__["layerDockStyle"] = _LayoutScript.setup_layerDockStyle_get
    if _newclass:
        layerDockStyle = _swig_property(_LayoutScript.setup_layerDockStyle_get, _LayoutScript.setup_layerDockStyle_set)
    __swig_setmethods__["depthOfCellrefs"] = _LayoutScript.setup_depthOfCellrefs_set
    __swig_getmethods__["depthOfCellrefs"] = _LayoutScript.setup_depthOfCellrefs_get
    if _newclass:
        depthOfCellrefs = _swig_property(_LayoutScript.setup_depthOfCellrefs_get, _LayoutScript.setup_depthOfCellrefs_set)
    __swig_setmethods__["showMenuIcons"] = _LayoutScript.setup_showMenuIcons_set
    __swig_getmethods__["showMenuIcons"] = _LayoutScript.setup_showMenuIcons_get
    if _newclass:
        showMenuIcons = _swig_property(_LayoutScript.setup_showMenuIcons_get, _LayoutScript.setup_showMenuIcons_set)
    if _newclass:
        setBackgroundColor = staticmethod(_LayoutScript.setup_setBackgroundColor)
    else:
        setBackgroundColor = _LayoutScript.setup_setBackgroundColor
    if _newclass:
        setMouseColor = staticmethod(_LayoutScript.setup_setMouseColor)
    else:
        setMouseColor = _LayoutScript.setup_setMouseColor
    if _newclass:
        setGridColor = staticmethod(_LayoutScript.setup_setGridColor)
    else:
        setGridColor = _LayoutScript.setup_setGridColor
    if _newclass:
        setZeroColor = staticmethod(_LayoutScript.setup_setZeroColor)
    else:
        setZeroColor = _LayoutScript.setup_setZeroColor
    if _newclass:
        setSelectColor = staticmethod(_LayoutScript.setup_setSelectColor)
    else:
        setSelectColor = _LayoutScript.setup_setSelectColor
    if _newclass:
        setHighlightColor = staticmethod(_LayoutScript.setup_setHighlightColor)
    else:
        setHighlightColor = _LayoutScript.setup_setHighlightColor
    if _newclass:
        setHighlightBrush = staticmethod(_LayoutScript.setup_setHighlightBrush)
    else:
        setHighlightBrush = _LayoutScript.setup_setHighlightBrush
    if _newclass:
        setStrongHighlightColor = staticmethod(_LayoutScript.setup_setStrongHighlightColor)
    else:
        setStrongHighlightColor = _LayoutScript.setup_setStrongHighlightColor
    if _newclass:
        setStrongHighlightBrush = staticmethod(_LayoutScript.setup_setStrongHighlightBrush)
    else:
        setStrongHighlightBrush = _LayoutScript.setup_setStrongHighlightBrush
    __swig_setmethods__["circularDefault"] = _LayoutScript.setup_circularDefault_set
    __swig_getmethods__["circularDefault"] = _LayoutScript.setup_circularDefault_get
    if _newclass:
        circularDefault = _swig_property(_LayoutScript.setup_circularDefault_get, _LayoutScript.setup_circularDefault_set)
    __swig_setmethods__["defaultPathWidth"] = _LayoutScript.setup_defaultPathWidth_set
    __swig_getmethods__["defaultPathWidth"] = _LayoutScript.setup_defaultPathWidth_get
    if _newclass:
        defaultPathWidth = _swig_property(_LayoutScript.setup_defaultPathWidth_get, _LayoutScript.setup_defaultPathWidth_set)
    __swig_setmethods__["defaultPathCap"] = _LayoutScript.setup_defaultPathCap_set
    __swig_getmethods__["defaultPathCap"] = _LayoutScript.setup_defaultPathCap_get
    if _newclass:
        defaultPathCap = _swig_property(_LayoutScript.setup_defaultPathCap_get, _LayoutScript.setup_defaultPathCap_set)
    __swig_setmethods__["defaultTextPresentation"] = _LayoutScript.setup_defaultTextPresentation_set
    __swig_getmethods__["defaultTextPresentation"] = _LayoutScript.setup_defaultTextPresentation_get
    if _newclass:
        defaultTextPresentation = _swig_property(_LayoutScript.setup_defaultTextPresentation_get, _LayoutScript.setup_defaultTextPresentation_set)
    __swig_setmethods__["defaultTextWidth"] = _LayoutScript.setup_defaultTextWidth_set
    __swig_getmethods__["defaultTextWidth"] = _LayoutScript.setup_defaultTextWidth_get
    if _newclass:
        defaultTextWidth = _swig_property(_LayoutScript.setup_defaultTextWidth_get, _LayoutScript.setup_defaultTextWidth_set)
    __swig_setmethods__["defaultBezierIteration"] = _LayoutScript.setup_defaultBezierIteration_set
    __swig_getmethods__["defaultBezierIteration"] = _LayoutScript.setup_defaultBezierIteration_get
    if _newclass:
        defaultBezierIteration = _swig_property(_LayoutScript.setup_defaultBezierIteration_get, _LayoutScript.setup_defaultBezierIteration_set)
    __swig_setmethods__["defaultShapeConstraint"] = _LayoutScript.setup_defaultShapeConstraint_set
    __swig_getmethods__["defaultShapeConstraint"] = _LayoutScript.setup_defaultShapeConstraint_get
    if _newclass:
        defaultShapeConstraint = _swig_property(_LayoutScript.setup_defaultShapeConstraint_get, _LayoutScript.setup_defaultShapeConstraint_set)
    __swig_setmethods__["cifSaveCircle"] = _LayoutScript.setup_cifSaveCircle_set
    __swig_getmethods__["cifSaveCircle"] = _LayoutScript.setup_cifSaveCircle_get
    if _newclass:
        cifSaveCircle = _swig_property(_LayoutScript.setup_cifSaveCircle_get, _LayoutScript.setup_cifSaveCircle_set)
    __swig_setmethods__["cifTopCell"] = _LayoutScript.setup_cifTopCell_set
    __swig_getmethods__["cifTopCell"] = _LayoutScript.setup_cifTopCell_get
    if _newclass:
        cifTopCell = _swig_property(_LayoutScript.setup_cifTopCell_get, _LayoutScript.setup_cifTopCell_set)
    __swig_setmethods__["dxfSaveLayerNumber"] = _LayoutScript.setup_dxfSaveLayerNumber_set
    __swig_getmethods__["dxfSaveLayerNumber"] = _LayoutScript.setup_dxfSaveLayerNumber_get
    if _newclass:
        dxfSaveLayerNumber = _swig_property(_LayoutScript.setup_dxfSaveLayerNumber_get, _LayoutScript.setup_dxfSaveLayerNumber_set)
    __swig_setmethods__["dxfSaveCircle"] = _LayoutScript.setup_dxfSaveCircle_set
    __swig_getmethods__["dxfSaveCircle"] = _LayoutScript.setup_dxfSaveCircle_get
    if _newclass:
        dxfSaveCircle = _swig_property(_LayoutScript.setup_dxfSaveCircle_get, _LayoutScript.setup_dxfSaveCircle_set)
    __swig_setmethods__["dxfSaveArc"] = _LayoutScript.setup_dxfSaveArc_set
    __swig_getmethods__["dxfSaveArc"] = _LayoutScript.setup_dxfSaveArc_get
    if _newclass:
        dxfSaveArc = _swig_property(_LayoutScript.setup_dxfSaveArc_get, _LayoutScript.setup_dxfSaveArc_set)
    __swig_setmethods__["dxfUnits"] = _LayoutScript.setup_dxfUnits_set
    __swig_getmethods__["dxfUnits"] = _LayoutScript.setup_dxfUnits_get
    if _newclass:
        dxfUnits = _swig_property(_LayoutScript.setup_dxfUnits_get, _LayoutScript.setup_dxfUnits_set)
    __swig_setmethods__["stlUnits"] = _LayoutScript.setup_stlUnits_set
    __swig_getmethods__["stlUnits"] = _LayoutScript.setup_stlUnits_get
    if _newclass:
        stlUnits = _swig_property(_LayoutScript.setup_stlUnits_get, _LayoutScript.setup_stlUnits_set)
    __swig_setmethods__["povUnits"] = _LayoutScript.setup_povUnits_set
    __swig_getmethods__["povUnits"] = _LayoutScript.setup_povUnits_get
    if _newclass:
        povUnits = _swig_property(_LayoutScript.setup_povUnits_get, _LayoutScript.setup_povUnits_set)
    __swig_setmethods__["offUnits"] = _LayoutScript.setup_offUnits_set
    __swig_getmethods__["offUnits"] = _LayoutScript.setup_offUnits_get
    if _newclass:
        offUnits = _swig_property(_LayoutScript.setup_offUnits_get, _LayoutScript.setup_offUnits_set)
    __swig_setmethods__["oasisSaveCircle"] = _LayoutScript.setup_oasisSaveCircle_set
    __swig_getmethods__["oasisSaveCircle"] = _LayoutScript.setup_oasisSaveCircle_get
    if _newclass:
        oasisSaveCircle = _swig_property(_LayoutScript.setup_oasisSaveCircle_get, _LayoutScript.setup_oasisSaveCircle_set)
    __swig_setmethods__["oasisSaveCtrapezoid"] = _LayoutScript.setup_oasisSaveCtrapezoid_set
    __swig_getmethods__["oasisSaveCtrapezoid"] = _LayoutScript.setup_oasisSaveCtrapezoid_get
    if _newclass:
        oasisSaveCtrapezoid = _swig_property(_LayoutScript.setup_oasisSaveCtrapezoid_get, _LayoutScript.setup_oasisSaveCtrapezoid_set)
    __swig_setmethods__["oasisSaveTrapezoid"] = _LayoutScript.setup_oasisSaveTrapezoid_set
    __swig_getmethods__["oasisSaveTrapezoid"] = _LayoutScript.setup_oasisSaveTrapezoid_get
    if _newclass:
        oasisSaveTrapezoid = _swig_property(_LayoutScript.setup_oasisSaveTrapezoid_get, _LayoutScript.setup_oasisSaveTrapezoid_set)
    __swig_setmethods__["oasisMapLayer"] = _LayoutScript.setup_oasisMapLayer_set
    __swig_getmethods__["oasisMapLayer"] = _LayoutScript.setup_oasisMapLayer_get
    if _newclass:
        oasisMapLayer = _swig_property(_LayoutScript.setup_oasisMapLayer_get, _LayoutScript.setup_oasisMapLayer_set)
    __swig_setmethods__["oasisSaveCBlock"] = _LayoutScript.setup_oasisSaveCBlock_set
    __swig_getmethods__["oasisSaveCBlock"] = _LayoutScript.setup_oasisSaveCBlock_get
    if _newclass:
        oasisSaveCBlock = _swig_property(_LayoutScript.setup_oasisSaveCBlock_get, _LayoutScript.setup_oasisSaveCBlock_set)
    __swig_setmethods__["oasisLoadLayerNames"] = _LayoutScript.setup_oasisLoadLayerNames_set
    __swig_getmethods__["oasisLoadLayerNames"] = _LayoutScript.setup_oasisLoadLayerNames_get
    if _newclass:
        oasisLoadLayerNames = _swig_property(_LayoutScript.setup_oasisLoadLayerNames_get, _LayoutScript.setup_oasisLoadLayerNames_set)
    __swig_setmethods__["openAccessCallbackPath"] = _LayoutScript.setup_openAccessCallbackPath_set
    __swig_getmethods__["openAccessCallbackPath"] = _LayoutScript.setup_openAccessCallbackPath_get
    if _newclass:
        openAccessCallbackPath = _swig_property(_LayoutScript.setup_openAccessCallbackPath_get, _LayoutScript.setup_openAccessCallbackPath_set)
    __swig_setmethods__["openAccessPyCell"] = _LayoutScript.setup_openAccessPyCell_set
    __swig_getmethods__["openAccessPyCell"] = _LayoutScript.setup_openAccessPyCell_get
    if _newclass:
        openAccessPyCell = _swig_property(_LayoutScript.setup_openAccessPyCell_get, _LayoutScript.setup_openAccessPyCell_set)
    __swig_setmethods__["openAccessMapLayerNames"] = _LayoutScript.setup_openAccessMapLayerNames_set
    __swig_getmethods__["openAccessMapLayerNames"] = _LayoutScript.setup_openAccessMapLayerNames_get
    if _newclass:
        openAccessMapLayerNames = _swig_property(_LayoutScript.setup_openAccessMapLayerNames_get, _LayoutScript.setup_openAccessMapLayerNames_set)
    __swig_setmethods__["openAccessSchematicStyle"] = _LayoutScript.setup_openAccessSchematicStyle_set
    __swig_getmethods__["openAccessSchematicStyle"] = _LayoutScript.setup_openAccessSchematicStyle_get
    if _newclass:
        openAccessSchematicStyle = _swig_property(_LayoutScript.setup_openAccessSchematicStyle_get, _LayoutScript.setup_openAccessSchematicStyle_set)
    __swig_setmethods__["openAccessBoundary"] = _LayoutScript.setup_openAccessBoundary_set
    __swig_getmethods__["openAccessBoundary"] = _LayoutScript.setup_openAccessBoundary_get
    if _newclass:
        openAccessBoundary = _swig_property(_LayoutScript.setup_openAccessBoundary_get, _LayoutScript.setup_openAccessBoundary_set)
    __swig_setmethods__["callbackPath"] = _LayoutScript.setup_callbackPath_set
    __swig_getmethods__["callbackPath"] = _LayoutScript.setup_callbackPath_get
    if _newclass:
        callbackPath = _swig_property(_LayoutScript.setup_callbackPath_get, _LayoutScript.setup_callbackPath_set)
    __swig_setmethods__["model3dPath"] = _LayoutScript.setup_model3dPath_set
    __swig_getmethods__["model3dPath"] = _LayoutScript.setup_model3dPath_get
    if _newclass:
        model3dPath = _swig_property(_LayoutScript.setup_model3dPath_get, _LayoutScript.setup_model3dPath_set)
    __swig_setmethods__["gdsOnlyStoreEnabledLayer"] = _LayoutScript.setup_gdsOnlyStoreEnabledLayer_set
    __swig_getmethods__["gdsOnlyStoreEnabledLayer"] = _LayoutScript.setup_gdsOnlyStoreEnabledLayer_get
    if _newclass:
        gdsOnlyStoreEnabledLayer = _swig_property(_LayoutScript.setup_gdsOnlyStoreEnabledLayer_get, _LayoutScript.setup_gdsOnlyStoreEnabledLayer_set)
    __swig_setmethods__["gdsPathToPolygon"] = _LayoutScript.setup_gdsPathToPolygon_set
    __swig_getmethods__["gdsPathToPolygon"] = _LayoutScript.setup_gdsPathToPolygon_get
    if _newclass:
        gdsPathToPolygon = _swig_property(_LayoutScript.setup_gdsPathToPolygon_get, _LayoutScript.setup_gdsPathToPolygon_set)
    __swig_setmethods__["oasisOnlyStoreEnabledLayer"] = _LayoutScript.setup_oasisOnlyStoreEnabledLayer_set
    __swig_getmethods__["oasisOnlyStoreEnabledLayer"] = _LayoutScript.setup_oasisOnlyStoreEnabledLayer_get
    if _newclass:
        oasisOnlyStoreEnabledLayer = _swig_property(_LayoutScript.setup_oasisOnlyStoreEnabledLayer_get, _LayoutScript.setup_oasisOnlyStoreEnabledLayer_set)
    __swig_setmethods__["autoDisableUnusedLayers"] = _LayoutScript.setup_autoDisableUnusedLayers_set
    __swig_getmethods__["autoDisableUnusedLayers"] = _LayoutScript.setup_autoDisableUnusedLayers_get
    if _newclass:
        autoDisableUnusedLayers = _swig_property(_LayoutScript.setup_autoDisableUnusedLayers_get, _LayoutScript.setup_autoDisableUnusedLayers_set)
    __swig_setmethods__["autoStoreLayerSetup"] = _LayoutScript.setup_autoStoreLayerSetup_set
    __swig_getmethods__["autoStoreLayerSetup"] = _LayoutScript.setup_autoStoreLayerSetup_get
    if _newclass:
        autoStoreLayerSetup = _swig_property(_LayoutScript.setup_autoStoreLayerSetup_get, _LayoutScript.setup_autoStoreLayerSetup_set)
    __swig_setmethods__["autoLoadLayerFiles"] = _LayoutScript.setup_autoLoadLayerFiles_set
    __swig_getmethods__["autoLoadLayerFiles"] = _LayoutScript.setup_autoLoadLayerFiles_get
    if _newclass:
        autoLoadLayerFiles = _swig_property(_LayoutScript.setup_autoLoadLayerFiles_get, _LayoutScript.setup_autoLoadLayerFiles_set)
    __swig_setmethods__["gdsAutoMapDatatypes"] = _LayoutScript.setup_gdsAutoMapDatatypes_set
    __swig_getmethods__["gdsAutoMapDatatypes"] = _LayoutScript.setup_gdsAutoMapDatatypes_get
    if _newclass:
        gdsAutoMapDatatypes = _swig_property(_LayoutScript.setup_gdsAutoMapDatatypes_get, _LayoutScript.setup_gdsAutoMapDatatypes_set)
    __swig_setmethods__["gdsStoreLayerNames"] = _LayoutScript.setup_gdsStoreLayerNames_set
    __swig_getmethods__["gdsStoreLayerNames"] = _LayoutScript.setup_gdsStoreLayerNames_get
    if _newclass:
        gdsStoreLayerNames = _swig_property(_LayoutScript.setup_gdsStoreLayerNames_get, _LayoutScript.setup_gdsStoreLayerNames_set)
    __swig_setmethods__["gdsStoreTextHeightAsMagnification"] = _LayoutScript.setup_gdsStoreTextHeightAsMagnification_set
    __swig_getmethods__["gdsStoreTextHeightAsMagnification"] = _LayoutScript.setup_gdsStoreTextHeightAsMagnification_get
    if _newclass:
        gdsStoreTextHeightAsMagnification = _swig_property(_LayoutScript.setup_gdsStoreTextHeightAsMagnification_get, _LayoutScript.setup_gdsStoreTextHeightAsMagnification_set)
    __swig_setmethods__["oasisAutoMapDatatypes"] = _LayoutScript.setup_oasisAutoMapDatatypes_set
    __swig_getmethods__["oasisAutoMapDatatypes"] = _LayoutScript.setup_oasisAutoMapDatatypes_get
    if _newclass:
        oasisAutoMapDatatypes = _swig_property(_LayoutScript.setup_oasisAutoMapDatatypes_get, _LayoutScript.setup_oasisAutoMapDatatypes_set)
    __swig_setmethods__["gdsMaxPoints"] = _LayoutScript.setup_gdsMaxPoints_set
    __swig_getmethods__["gdsMaxPoints"] = _LayoutScript.setup_gdsMaxPoints_get
    if _newclass:
        gdsMaxPoints = _swig_property(_LayoutScript.setup_gdsMaxPoints_get, _LayoutScript.setup_gdsMaxPoints_set)
    __swig_setmethods__["gdsMultiXYRecord"] = _LayoutScript.setup_gdsMultiXYRecord_set
    __swig_getmethods__["gdsMultiXYRecord"] = _LayoutScript.setup_gdsMultiXYRecord_get
    if _newclass:
        gdsMultiXYRecord = _swig_property(_LayoutScript.setup_gdsMultiXYRecord_get, _LayoutScript.setup_gdsMultiXYRecord_set)
    __swig_setmethods__["gdsPad2048"] = _LayoutScript.setup_gdsPad2048_set
    __swig_getmethods__["gdsPad2048"] = _LayoutScript.setup_gdsPad2048_get
    if _newclass:
        gdsPad2048 = _swig_property(_LayoutScript.setup_gdsPad2048_get, _LayoutScript.setup_gdsPad2048_set)
    __swig_setmethods__["gdsMapLayer"] = _LayoutScript.setup_gdsMapLayer_set
    __swig_getmethods__["gdsMapLayer"] = _LayoutScript.setup_gdsMapLayer_get
    if _newclass:
        gdsMapLayer = _swig_property(_LayoutScript.setup_gdsMapLayer_get, _LayoutScript.setup_gdsMapLayer_set)
    __swig_setmethods__["gdsBoxToPolygon"] = _LayoutScript.setup_gdsBoxToPolygon_set
    __swig_getmethods__["gdsBoxToPolygon"] = _LayoutScript.setup_gdsBoxToPolygon_get
    if _newclass:
        gdsBoxToPolygon = _swig_property(_LayoutScript.setup_gdsBoxToPolygon_get, _LayoutScript.setup_gdsBoxToPolygon_set)
    __swig_setmethods__["gdsTextToPolygon"] = _LayoutScript.setup_gdsTextToPolygon_set
    __swig_getmethods__["gdsTextToPolygon"] = _LayoutScript.setup_gdsTextToPolygon_get
    if _newclass:
        gdsTextToPolygon = _swig_property(_LayoutScript.setup_gdsTextToPolygon_get, _LayoutScript.setup_gdsTextToPolygon_set)
    __swig_setmethods__["gdsTextToPolygonDefaultWidth"] = _LayoutScript.setup_gdsTextToPolygonDefaultWidth_set
    __swig_getmethods__["gdsTextToPolygonDefaultWidth"] = _LayoutScript.setup_gdsTextToPolygonDefaultWidth_get
    if _newclass:
        gdsTextToPolygonDefaultWidth = _swig_property(_LayoutScript.setup_gdsTextToPolygonDefaultWidth_get, _LayoutScript.setup_gdsTextToPolygonDefaultWidth_set)
    __swig_setmethods__["gdsValidate"] = _LayoutScript.setup_gdsValidate_set
    __swig_getmethods__["gdsValidate"] = _LayoutScript.setup_gdsValidate_get
    if _newclass:
        gdsValidate = _swig_property(_LayoutScript.setup_gdsValidate_get, _LayoutScript.setup_gdsValidate_set)
    __swig_setmethods__["gerberSaveArc"] = _LayoutScript.setup_gerberSaveArc_set
    __swig_getmethods__["gerberSaveArc"] = _LayoutScript.setup_gerberSaveArc_get
    if _newclass:
        gerberSaveArc = _swig_property(_LayoutScript.setup_gerberSaveArc_get, _LayoutScript.setup_gerberSaveArc_set)
    __swig_setmethods__["gerberSaveOptimize"] = _LayoutScript.setup_gerberSaveOptimize_set
    __swig_getmethods__["gerberSaveOptimize"] = _LayoutScript.setup_gerberSaveOptimize_get
    if _newclass:
        gerberSaveOptimize = _swig_property(_LayoutScript.setup_gerberSaveOptimize_get, _LayoutScript.setup_gerberSaveOptimize_set)
    __swig_setmethods__["gerberInverseShapesOnOtherLayer"] = _LayoutScript.setup_gerberInverseShapesOnOtherLayer_set
    __swig_getmethods__["gerberInverseShapesOnOtherLayer"] = _LayoutScript.setup_gerberInverseShapesOnOtherLayer_get
    if _newclass:
        gerberInverseShapesOnOtherLayer = _swig_property(_LayoutScript.setup_gerberInverseShapesOnOtherLayer_get, _LayoutScript.setup_gerberInverseShapesOnOtherLayer_set)
    __swig_setmethods__["gerberSaveCircle"] = _LayoutScript.setup_gerberSaveCircle_set
    __swig_getmethods__["gerberSaveCircle"] = _LayoutScript.setup_gerberSaveCircle_get
    if _newclass:
        gerberSaveCircle = _swig_property(_LayoutScript.setup_gerberSaveCircle_get, _LayoutScript.setup_gerberSaveCircle_set)
    __swig_setmethods__["lefCellBoundaryLayer"] = _LayoutScript.setup_lefCellBoundaryLayer_set
    __swig_getmethods__["lefCellBoundaryLayer"] = _LayoutScript.setup_lefCellBoundaryLayer_get
    if _newclass:
        lefCellBoundaryLayer = _swig_property(_LayoutScript.setup_lefCellBoundaryLayer_get, _LayoutScript.setup_lefCellBoundaryLayer_set)
    __swig_setmethods__["apLamda"] = _LayoutScript.setup_apLamda_set
    __swig_getmethods__["apLamda"] = _LayoutScript.setup_apLamda_get
    if _newclass:
        apLamda = _swig_property(_LayoutScript.setup_apLamda_get, _LayoutScript.setup_apLamda_set)
    __swig_setmethods__["sourceDatabase"] = _LayoutScript.setup_sourceDatabase_set
    __swig_getmethods__["sourceDatabase"] = _LayoutScript.setup_sourceDatabase_get
    if _newclass:
        sourceDatabase = _swig_property(_LayoutScript.setup_sourceDatabase_get, _LayoutScript.setup_sourceDatabase_set)
    __swig_setmethods__["pixelResolution"] = _LayoutScript.setup_pixelResolution_set
    __swig_getmethods__["pixelResolution"] = _LayoutScript.setup_pixelResolution_get
    if _newclass:
        pixelResolution = _swig_property(_LayoutScript.setup_pixelResolution_get, _LayoutScript.setup_pixelResolution_set)
    __swig_setmethods__["pixelLayerMap"] = _LayoutScript.setup_pixelLayerMap_set
    __swig_getmethods__["pixelLayerMap"] = _LayoutScript.setup_pixelLayerMap_get
    if _newclass:
        pixelLayerMap = _swig_property(_LayoutScript.setup_pixelLayerMap_get, _LayoutScript.setup_pixelLayerMap_set)
    __swig_setmethods__["pixelColorBits"] = _LayoutScript.setup_pixelColorBits_set
    __swig_getmethods__["pixelColorBits"] = _LayoutScript.setup_pixelColorBits_get
    if _newclass:
        pixelColorBits = _swig_property(_LayoutScript.setup_pixelColorBits_get, _LayoutScript.setup_pixelColorBits_set)
    __swig_setmethods__["pixelMethod"] = _LayoutScript.setup_pixelMethod_set
    __swig_getmethods__["pixelMethod"] = _LayoutScript.setup_pixelMethod_get
    if _newclass:
        pixelMethod = _swig_property(_LayoutScript.setup_pixelMethod_get, _LayoutScript.setup_pixelMethod_set)
    __swig_setmethods__["pixelDither"] = _LayoutScript.setup_pixelDither_set
    __swig_getmethods__["pixelDither"] = _LayoutScript.setup_pixelDither_get
    if _newclass:
        pixelDither = _swig_property(_LayoutScript.setup_pixelDither_get, _LayoutScript.setup_pixelDither_set)
    __swig_setmethods__["pixelBorder"] = _LayoutScript.setup_pixelBorder_set
    __swig_getmethods__["pixelBorder"] = _LayoutScript.setup_pixelBorder_get
    if _newclass:
        pixelBorder = _swig_property(_LayoutScript.setup_pixelBorder_get, _LayoutScript.setup_pixelBorder_set)
    __swig_setmethods__["pixelMinSize"] = _LayoutScript.setup_pixelMinSize_set
    __swig_getmethods__["pixelMinSize"] = _LayoutScript.setup_pixelMinSize_get
    if _newclass:
        pixelMinSize = _swig_property(_LayoutScript.setup_pixelMinSize_get, _LayoutScript.setup_pixelMinSize_set)
    __swig_setmethods__["pixelSteps"] = _LayoutScript.setup_pixelSteps_set
    __swig_getmethods__["pixelSteps"] = _LayoutScript.setup_pixelSteps_get
    if _newclass:
        pixelSteps = _swig_property(_LayoutScript.setup_pixelSteps_get, _LayoutScript.setup_pixelSteps_set)
    __swig_setmethods__["pixelInvert"] = _LayoutScript.setup_pixelInvert_set
    __swig_getmethods__["pixelInvert"] = _LayoutScript.setup_pixelInvert_get
    if _newclass:
        pixelInvert = _swig_property(_LayoutScript.setup_pixelInvert_get, _LayoutScript.setup_pixelInvert_set)
    __swig_setmethods__["tldLamda"] = _LayoutScript.setup_tldLamda_set
    __swig_getmethods__["tldLamda"] = _LayoutScript.setup_tldLamda_get
    if _newclass:
        tldLamda = _swig_property(_LayoutScript.setup_tldLamda_get, _LayoutScript.setup_tldLamda_set)
    __swig_setmethods__["csvFieldDelimiter"] = _LayoutScript.setup_csvFieldDelimiter_set
    __swig_getmethods__["csvFieldDelimiter"] = _LayoutScript.setup_csvFieldDelimiter_get
    if _newclass:
        csvFieldDelimiter = _swig_property(_LayoutScript.setup_csvFieldDelimiter_get, _LayoutScript.setup_csvFieldDelimiter_set)
    __swig_setmethods__["epsEndOfLine"] = _LayoutScript.setup_epsEndOfLine_set
    __swig_getmethods__["epsEndOfLine"] = _LayoutScript.setup_epsEndOfLine_get
    if _newclass:
        epsEndOfLine = _swig_property(_LayoutScript.setup_epsEndOfLine_get, _LayoutScript.setup_epsEndOfLine_set)
    __swig_setmethods__["epsScale"] = _LayoutScript.setup_epsScale_set
    __swig_getmethods__["epsScale"] = _LayoutScript.setup_epsScale_get
    if _newclass:
        epsScale = _swig_property(_LayoutScript.setup_epsScale_get, _LayoutScript.setup_epsScale_set)
    __swig_setmethods__["svgEndOfLine"] = _LayoutScript.setup_svgEndOfLine_set
    __swig_getmethods__["svgEndOfLine"] = _LayoutScript.setup_svgEndOfLine_get
    if _newclass:
        svgEndOfLine = _swig_property(_LayoutScript.setup_svgEndOfLine_get, _LayoutScript.setup_svgEndOfLine_set)
    __swig_setmethods__["dsnBoundaryLayer"] = _LayoutScript.setup_dsnBoundaryLayer_set
    __swig_getmethods__["dsnBoundaryLayer"] = _LayoutScript.setup_dsnBoundaryLayer_get
    if _newclass:
        dsnBoundaryLayer = _swig_property(_LayoutScript.setup_dsnBoundaryLayer_get, _LayoutScript.setup_dsnBoundaryLayer_set)
    __swig_setmethods__["dsnKeepoutLayer"] = _LayoutScript.setup_dsnKeepoutLayer_set
    __swig_getmethods__["dsnKeepoutLayer"] = _LayoutScript.setup_dsnKeepoutLayer_get
    if _newclass:
        dsnKeepoutLayer = _swig_property(_LayoutScript.setup_dsnKeepoutLayer_get, _LayoutScript.setup_dsnKeepoutLayer_set)
    __swig_setmethods__["scrollDirection"] = _LayoutScript.setup_scrollDirection_set
    __swig_getmethods__["scrollDirection"] = _LayoutScript.setup_scrollDirection_get
    if _newclass:
        scrollDirection = _swig_property(_LayoutScript.setup_scrollDirection_get, _LayoutScript.setup_scrollDirection_set)
    __swig_setmethods__["updateCheck"] = _LayoutScript.setup_updateCheck_set
    __swig_getmethods__["updateCheck"] = _LayoutScript.setup_updateCheck_get
    if _newclass:
        updateCheck = _swig_property(_LayoutScript.setup_updateCheck_get, _LayoutScript.setup_updateCheck_set)
    __swig_setmethods__["defaultPolygonRemoveNotNeededPoints"] = _LayoutScript.setup_defaultPolygonRemoveNotNeededPoints_set
    __swig_getmethods__["defaultPolygonRemoveNotNeededPoints"] = _LayoutScript.setup_defaultPolygonRemoveNotNeededPoints_get
    if _newclass:
        defaultPolygonRemoveNotNeededPoints = _swig_property(_LayoutScript.setup_defaultPolygonRemoveNotNeededPoints_get, _LayoutScript.setup_defaultPolygonRemoveNotNeededPoints_set)
    __swig_setmethods__["defaultPolygonFixSelfintersectingPolygons"] = _LayoutScript.setup_defaultPolygonFixSelfintersectingPolygons_set
    __swig_getmethods__["defaultPolygonFixSelfintersectingPolygons"] = _LayoutScript.setup_defaultPolygonFixSelfintersectingPolygons_get
    if _newclass:
        defaultPolygonFixSelfintersectingPolygons = _swig_property(_LayoutScript.setup_defaultPolygonFixSelfintersectingPolygons_get, _LayoutScript.setup_defaultPolygonFixSelfintersectingPolygons_set)
    __swig_setmethods__["paintEngine"] = _LayoutScript.setup_paintEngine_set
    __swig_getmethods__["paintEngine"] = _LayoutScript.setup_paintEngine_get
    if _newclass:
        paintEngine = _swig_property(_LayoutScript.setup_paintEngine_get, _LayoutScript.setup_paintEngine_set)
    __swig_setmethods__["netlistAutotrigger"] = _LayoutScript.setup_netlistAutotrigger_set
    __swig_getmethods__["netlistAutotrigger"] = _LayoutScript.setup_netlistAutotrigger_get
    if _newclass:
        netlistAutotrigger = _swig_property(_LayoutScript.setup_netlistAutotrigger_get, _LayoutScript.setup_netlistAutotrigger_set)
    __swig_setmethods__["netlistExtractAllAsDevice"] = _LayoutScript.setup_netlistExtractAllAsDevice_set
    __swig_getmethods__["netlistExtractAllAsDevice"] = _LayoutScript.setup_netlistExtractAllAsDevice_get
    if _newclass:
        netlistExtractAllAsDevice = _swig_property(_LayoutScript.setup_netlistExtractAllAsDevice_get, _LayoutScript.setup_netlistExtractAllAsDevice_set)
    __swig_setmethods__["netListImportVhdlUpperNames"] = _LayoutScript.setup_netListImportVhdlUpperNames_set
    __swig_getmethods__["netListImportVhdlUpperNames"] = _LayoutScript.setup_netListImportVhdlUpperNames_get
    if _newclass:
        netListImportVhdlUpperNames = _swig_property(_LayoutScript.setup_netListImportVhdlUpperNames_get, _LayoutScript.setup_netListImportVhdlUpperNames_set)
    __swig_setmethods__["netListImportUseComponentLibrary"] = _LayoutScript.setup_netListImportUseComponentLibrary_set
    __swig_getmethods__["netListImportUseComponentLibrary"] = _LayoutScript.setup_netListImportUseComponentLibrary_get
    if _newclass:
        netListImportUseComponentLibrary = _swig_property(_LayoutScript.setup_netListImportUseComponentLibrary_get, _LayoutScript.setup_netListImportUseComponentLibrary_set)
    __swig_setmethods__["placeModeForPCB"] = _LayoutScript.setup_placeModeForPCB_set
    __swig_getmethods__["placeModeForPCB"] = _LayoutScript.setup_placeModeForPCB_get
    if _newclass:
        placeModeForPCB = _swig_property(_LayoutScript.setup_placeModeForPCB_get, _LayoutScript.setup_placeModeForPCB_set)
    __swig_setmethods__["showPlacementsPorts"] = _LayoutScript.setup_showPlacementsPorts_set
    __swig_getmethods__["showPlacementsPorts"] = _LayoutScript.setup_showPlacementsPorts_get
    if _newclass:
        showPlacementsPorts = _swig_property(_LayoutScript.setup_showPlacementsPorts_get, _LayoutScript.setup_showPlacementsPorts_set)
    __swig_setmethods__["pcbSolderClearance"] = _LayoutScript.setup_pcbSolderClearance_set
    __swig_getmethods__["pcbSolderClearance"] = _LayoutScript.setup_pcbSolderClearance_get
    if _newclass:
        pcbSolderClearance = _swig_property(_LayoutScript.setup_pcbSolderClearance_get, _LayoutScript.setup_pcbSolderClearance_set)
    __swig_setmethods__["pcbCreamClearance"] = _LayoutScript.setup_pcbCreamClearance_set
    __swig_getmethods__["pcbCreamClearance"] = _LayoutScript.setup_pcbCreamClearance_get
    if _newclass:
        pcbCreamClearance = _swig_property(_LayoutScript.setup_pcbCreamClearance_get, _LayoutScript.setup_pcbCreamClearance_set)
    __swig_setmethods__["netlistUnnamedNodes"] = _LayoutScript.setup_netlistUnnamedNodes_set
    __swig_getmethods__["netlistUnnamedNodes"] = _LayoutScript.setup_netlistUnnamedNodes_get
    if _newclass:
        netlistUnnamedNodes = _swig_property(_LayoutScript.setup_netlistUnnamedNodes_get, _LayoutScript.setup_netlistUnnamedNodes_set)
    __swig_setmethods__["netlistGlobalNodes"] = _LayoutScript.setup_netlistGlobalNodes_set
    __swig_getmethods__["netlistGlobalNodes"] = _LayoutScript.setup_netlistGlobalNodes_get
    if _newclass:
        netlistGlobalNodes = _swig_property(_LayoutScript.setup_netlistGlobalNodes_get, _LayoutScript.setup_netlistGlobalNodes_set)
    if _newclass:
        setWireColor = staticmethod(_LayoutScript.setup_setWireColor)
    else:
        setWireColor = _LayoutScript.setup_setWireColor
    if _newclass:
        setBusColor = staticmethod(_LayoutScript.setup_setBusColor)
    else:
        setBusColor = _LayoutScript.setup_setBusColor
    if _newclass:
        netlistFormats = staticmethod(_LayoutScript.setup_netlistFormats)
    else:
        netlistFormats = _LayoutScript.setup_netlistFormats
    if _newclass:
        setNetlistFormat = staticmethod(_LayoutScript.setup_setNetlistFormat)
    else:
        setNetlistFormat = _LayoutScript.setup_setNetlistFormat
    if _newclass:
        getNetlistFormat = staticmethod(_LayoutScript.setup_getNetlistFormat)
    else:
        getNetlistFormat = _LayoutScript.setup_getNetlistFormat
    if _newclass:
        setNetlistSubFormat = staticmethod(_LayoutScript.setup_setNetlistSubFormat)
    else:
        setNetlistSubFormat = _LayoutScript.setup_setNetlistSubFormat
    if _newclass:
        getNetlistSubFormat = staticmethod(_LayoutScript.setup_getNetlistSubFormat)
    else:
        getNetlistSubFormat = _LayoutScript.setup_getNetlistSubFormat
    if _newclass:
        setNetlistSubModelFormat = staticmethod(_LayoutScript.setup_setNetlistSubModelFormat)
    else:
        setNetlistSubModelFormat = _LayoutScript.setup_setNetlistSubModelFormat
    if _newclass:
        getNetlistSubModelFormat = staticmethod(_LayoutScript.setup_getNetlistSubModelFormat)
    else:
        getNetlistSubModelFormat = _LayoutScript.setup_getNetlistSubModelFormat
    if _newclass:
        checkNetlistSetup = staticmethod(_LayoutScript.setup_checkNetlistSetup)
    else:
        checkNetlistSetup = _LayoutScript.setup_checkNetlistSetup
    if _newclass:
        setCodec = staticmethod(_LayoutScript.setup_setCodec)
    else:
        setCodec = _LayoutScript.setup_setCodec
    if _newclass:
        fullLicense = staticmethod(_LayoutScript.setup_fullLicense)
    else:
        fullLicense = _LayoutScript.setup_fullLicense
    if _newclass:
        setLicense = staticmethod(_LayoutScript.setup_setLicense)
    else:
        setLicense = _LayoutScript.setup_setLicense
    __swig_setmethods__["macroDirectory"] = _LayoutScript.setup_macroDirectory_set
    __swig_getmethods__["macroDirectory"] = _LayoutScript.setup_macroDirectory_get
    if _newclass:
        macroDirectory = _swig_property(_LayoutScript.setup_macroDirectory_get, _LayoutScript.setup_macroDirectory_set)
    __swig_setmethods__["macroPath"] = _LayoutScript.setup_macroPath_set
    __swig_getmethods__["macroPath"] = _LayoutScript.setup_macroPath_get
    if _newclass:
        macroPath = _swig_property(_LayoutScript.setup_macroPath_get, _LayoutScript.setup_macroPath_set)
    __swig_setmethods__["autostartMacro"] = _LayoutScript.setup_autostartMacro_set
    __swig_getmethods__["autostartMacro"] = _LayoutScript.setup_autostartMacro_get
    if _newclass:
        autostartMacro = _swig_property(_LayoutScript.setup_autostartMacro_get, _LayoutScript.setup_autostartMacro_set)
    __swig_setmethods__["autostartMacroTrigger"] = _LayoutScript.setup_autostartMacroTrigger_set
    __swig_getmethods__["autostartMacroTrigger"] = _LayoutScript.setup_autostartMacroTrigger_get
    if _newclass:
        autostartMacroTrigger = _swig_property(_LayoutScript.setup_autostartMacroTrigger_get, _LayoutScript.setup_autostartMacroTrigger_set)
    __swig_setmethods__["pythonSuffix"] = _LayoutScript.setup_pythonSuffix_set
    __swig_getmethods__["pythonSuffix"] = _LayoutScript.setup_pythonSuffix_get
    if _newclass:
        pythonSuffix = _swig_property(_LayoutScript.setup_pythonSuffix_get, _LayoutScript.setup_pythonSuffix_set)
    if _newclass:
        set = staticmethod(_LayoutScript.setup_set)
    else:
        set = _LayoutScript.setup_set
    if _newclass:
        resetToolbars = staticmethod(_LayoutScript.setup_resetToolbars)
    else:
        resetToolbars = _LayoutScript.setup_resetToolbars
    if _newclass:
        getNetlistNotUseDatatype = staticmethod(_LayoutScript.setup_getNetlistNotUseDatatype)
    else:
        getNetlistNotUseDatatype = _LayoutScript.setup_getNetlistNotUseDatatype
    if _newclass:
        addNetlistNotUseDatatype = staticmethod(_LayoutScript.setup_addNetlistNotUseDatatype)
    else:
        addNetlistNotUseDatatype = _LayoutScript.setup_addNetlistNotUseDatatype
    if _newclass:
        clearNetlistNotUseDatatype = staticmethod(_LayoutScript.setup_clearNetlistNotUseDatatype)
    else:
        clearNetlistNotUseDatatype = _LayoutScript.setup_clearNetlistNotUseDatatype
    if _newclass:
        dataStore = staticmethod(_LayoutScript.setup_dataStore)
    else:
        dataStore = _LayoutScript.setup_dataStore
    if _newclass:
        dataGet = staticmethod(_LayoutScript.setup_dataGet)
    else:
        dataGet = _LayoutScript.setup_dataGet
    if _newclass:
        dataClear = staticmethod(_LayoutScript.setup_dataClear)
    else:
        dataClear = _LayoutScript.setup_dataClear
    if _newclass:
        dataClearAll = staticmethod(_LayoutScript.setup_dataClearAll)
    else:
        dataClearAll = _LayoutScript.setup_dataClearAll
    if _newclass:
        useOaVersion = staticmethod(_LayoutScript.setup_useOaVersion)
    else:
        useOaVersion = _LayoutScript.setup_useOaVersion
    if _newclass:
        version = staticmethod(_LayoutScript.setup_version)
    else:
        version = _LayoutScript.setup_version
    if _newclass:
        whiteBackground = staticmethod(_LayoutScript.setup_whiteBackground)
    else:
        whiteBackground = _LayoutScript.setup_whiteBackground
    if _newclass:
        getLibDefsFilename = staticmethod(_LayoutScript.setup_getLibDefsFilename)
    else:
        getLibDefsFilename = _LayoutScript.setup_getLibDefsFilename

    def __init__(self):
        this = _LayoutScript.new_setup()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _LayoutScript.delete_setup
    __del__ = lambda self: None
setup_swigregister = _LayoutScript.setup_swigregister
setup_swigregister(setup)

def setup_setBackgroundColor(red, green, blue):
    return _LayoutScript.setup_setBackgroundColor(red, green, blue)
setup_setBackgroundColor = _LayoutScript.setup_setBackgroundColor

def setup_setMouseColor(red, green, blue):
    return _LayoutScript.setup_setMouseColor(red, green, blue)
setup_setMouseColor = _LayoutScript.setup_setMouseColor

def setup_setGridColor(red, green, blue):
    return _LayoutScript.setup_setGridColor(red, green, blue)
setup_setGridColor = _LayoutScript.setup_setGridColor

def setup_setZeroColor(red, green, blue):
    return _LayoutScript.setup_setZeroColor(red, green, blue)
setup_setZeroColor = _LayoutScript.setup_setZeroColor

def setup_setSelectColor(red, green, blue):
    return _LayoutScript.setup_setSelectColor(red, green, blue)
setup_setSelectColor = _LayoutScript.setup_setSelectColor

def setup_setHighlightColor(red, green, blue):
    return _LayoutScript.setup_setHighlightColor(red, green, blue)
setup_setHighlightColor = _LayoutScript.setup_setHighlightColor

def setup_setHighlightBrush(brush):
    return _LayoutScript.setup_setHighlightBrush(brush)
setup_setHighlightBrush = _LayoutScript.setup_setHighlightBrush

def setup_setStrongHighlightColor(red, green, blue):
    return _LayoutScript.setup_setStrongHighlightColor(red, green, blue)
setup_setStrongHighlightColor = _LayoutScript.setup_setStrongHighlightColor

def setup_setStrongHighlightBrush(brush):
    return _LayoutScript.setup_setStrongHighlightBrush(brush)
setup_setStrongHighlightBrush = _LayoutScript.setup_setStrongHighlightBrush

def setup_setWireColor(red, green, blue):
    return _LayoutScript.setup_setWireColor(red, green, blue)
setup_setWireColor = _LayoutScript.setup_setWireColor

def setup_setBusColor(red, green, blue):
    return _LayoutScript.setup_setBusColor(red, green, blue)
setup_setBusColor = _LayoutScript.setup_setBusColor

def setup_netlistFormats():
    return _LayoutScript.setup_netlistFormats()
setup_netlistFormats = _LayoutScript.setup_netlistFormats

def setup_setNetlistFormat(type, value):
    return _LayoutScript.setup_setNetlistFormat(type, value)
setup_setNetlistFormat = _LayoutScript.setup_setNetlistFormat

def setup_getNetlistFormat(type):
    return _LayoutScript.setup_getNetlistFormat(type)
setup_getNetlistFormat = _LayoutScript.setup_getNetlistFormat

def setup_setNetlistSubFormat(type, value):
    return _LayoutScript.setup_setNetlistSubFormat(type, value)
setup_setNetlistSubFormat = _LayoutScript.setup_setNetlistSubFormat

def setup_getNetlistSubFormat(type):
    return _LayoutScript.setup_getNetlistSubFormat(type)
setup_getNetlistSubFormat = _LayoutScript.setup_getNetlistSubFormat

def setup_setNetlistSubModelFormat(type, value):
    return _LayoutScript.setup_setNetlistSubModelFormat(type, value)
setup_setNetlistSubModelFormat = _LayoutScript.setup_setNetlistSubModelFormat

def setup_getNetlistSubModelFormat(type):
    return _LayoutScript.setup_getNetlistSubModelFormat(type)
setup_getNetlistSubModelFormat = _LayoutScript.setup_getNetlistSubModelFormat

def setup_checkNetlistSetup(type):
    return _LayoutScript.setup_checkNetlistSetup(type)
setup_checkNetlistSetup = _LayoutScript.setup_checkNetlistSetup

def setup_setCodec(s):
    return _LayoutScript.setup_setCodec(s)
setup_setCodec = _LayoutScript.setup_setCodec

def setup_fullLicense():
    return _LayoutScript.setup_fullLicense()
setup_fullLicense = _LayoutScript.setup_fullLicense

def setup_setLicense(s):
    return _LayoutScript.setup_setLicense(s)
setup_setLicense = _LayoutScript.setup_setLicense

def setup_set(arg2, arg3):
    return _LayoutScript.setup_set(arg2, arg3)
setup_set = _LayoutScript.setup_set

def setup_resetToolbars():
    return _LayoutScript.setup_resetToolbars()
setup_resetToolbars = _LayoutScript.setup_resetToolbars

def setup_getNetlistNotUseDatatype():
    return _LayoutScript.setup_getNetlistNotUseDatatype()
setup_getNetlistNotUseDatatype = _LayoutScript.setup_getNetlistNotUseDatatype

def setup_addNetlistNotUseDatatype(arg2):
    return _LayoutScript.setup_addNetlistNotUseDatatype(arg2)
setup_addNetlistNotUseDatatype = _LayoutScript.setup_addNetlistNotUseDatatype

def setup_clearNetlistNotUseDatatype():
    return _LayoutScript.setup_clearNetlistNotUseDatatype()
setup_clearNetlistNotUseDatatype = _LayoutScript.setup_clearNetlistNotUseDatatype

def setup_dataStore(name, value):
    return _LayoutScript.setup_dataStore(name, value)
setup_dataStore = _LayoutScript.setup_dataStore

def setup_dataGet(name):
    return _LayoutScript.setup_dataGet(name)
setup_dataGet = _LayoutScript.setup_dataGet

def setup_dataClear(name):
    return _LayoutScript.setup_dataClear(name)
setup_dataClear = _LayoutScript.setup_dataClear

def setup_dataClearAll():
    return _LayoutScript.setup_dataClearAll()
setup_dataClearAll = _LayoutScript.setup_dataClearAll

def setup_useOaVersion(arg2):
    return _LayoutScript.setup_useOaVersion(arg2)
setup_useOaVersion = _LayoutScript.setup_useOaVersion

def setup_version():
    return _LayoutScript.setup_version()
setup_version = _LayoutScript.setup_version

def setup_whiteBackground():
    return _LayoutScript.setup_whiteBackground()
setup_whiteBackground = _LayoutScript.setup_whiteBackground

def setup_getLibDefsFilename():
    return _LayoutScript.setup_getLibDefsFilename()
setup_getLibDefsFilename = _LayoutScript.setup_getLibDefsFilename

class sheet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sheet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sheet, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_setmethods__["sheetName"] = _LayoutScript.sheet_sheetName_set
    __swig_getmethods__["sheetName"] = _LayoutScript.sheet_sheetName_get
    if _newclass:
        sheetName = _swig_property(_LayoutScript.sheet_sheetName_get, _LayoutScript.sheet_sheetName_set)
    __swig_setmethods__["firstElement"] = _LayoutScript.sheet_firstElement_set
    __swig_getmethods__["firstElement"] = _LayoutScript.sheet_firstElement_get
    if _newclass:
        firstElement = _swig_property(_LayoutScript.sheet_firstElement_get, _LayoutScript.sheet_firstElement_set)

    def existsDevicename(self, sname):
        return _LayoutScript.sheet_existsDevicename(self, sname)

    def getDevice(self, name):
        return _LayoutScript.sheet_getDevice(self, name)

    def addWire(self, p):
        return _LayoutScript.sheet_addWire(self, p)

    def addBus(self, p):
        return _LayoutScript.sheet_addBus(self, p)

    def addGround(self, p):
        return _LayoutScript.sheet_addGround(self, p)

    def addPort(self, p, text):
        return _LayoutScript.sheet_addPort(self, p, text)

    def addBusport(self, p, text):
        return _LayoutScript.sheet_addBusport(self, p, text)

    def addWireLabel(self, p):
        return _LayoutScript.sheet_addWireLabel(self, p)

    def addPlacement(self, *args):
        return _LayoutScript.sheet_addPlacement(self, *args)

    def addPolyline(self, *args):
        return _LayoutScript.sheet_addPolyline(self, *args)

    def addPolygon(self, *args):
        return _LayoutScript.sheet_addPolygon(self, *args)

    def addArc(self, *args):
        return _LayoutScript.sheet_addArc(self, *args)

    def addText(self, *args):
        return _LayoutScript.sheet_addText(self, *args)

    def addCircle(self, *args):
        return _LayoutScript.sheet_addCircle(self, *args)

    def addRect(self, *args):
        return _LayoutScript.sheet_addRect(self, *args)

    def getUnusedDevicename(self, prefix):
        return _LayoutScript.sheet_getUnusedDevicename(self, prefix)

    def deleteElement(self, arg2):
        return _LayoutScript.sheet_deleteElement(self, arg2)

    def getSheetComponent(self):
        return _LayoutScript.sheet_getSheetComponent(self)
    __swig_destroy__ = _LayoutScript.delete_sheet
    __del__ = lambda self: None
sheet_swigregister = _LayoutScript.sheet_swigregister
sheet_swigregister(sheet)

class sheetList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sheetList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sheetList, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_setmethods__["thisSheet"] = _LayoutScript.sheetList_thisSheet_set
    __swig_getmethods__["thisSheet"] = _LayoutScript.sheetList_thisSheet_get
    if _newclass:
        thisSheet = _swig_property(_LayoutScript.sheetList_thisSheet_get, _LayoutScript.sheetList_thisSheet_set)
    __swig_setmethods__["nextSheet"] = _LayoutScript.sheetList_nextSheet_set
    __swig_getmethods__["nextSheet"] = _LayoutScript.sheetList_nextSheet_get
    if _newclass:
        nextSheet = _swig_property(_LayoutScript.sheetList_nextSheet_get, _LayoutScript.sheetList_nextSheet_set)
    __swig_destroy__ = _LayoutScript.delete_sheetList
    __del__ = lambda self: None
sheetList_swigregister = _LayoutScript.sheetList_swigregister
sheetList_swigregister(sheetList)

class schematic(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, schematic, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, schematic, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_setmethods__["filename"] = _LayoutScript.schematic_filename_set
    __swig_getmethods__["filename"] = _LayoutScript.schematic_filename_get
    if _newclass:
        filename = _swig_property(_LayoutScript.schematic_filename_get, _LayoutScript.schematic_filename_set)
    __swig_setmethods__["drawing"] = _LayoutScript.schematic_drawing_set
    __swig_getmethods__["drawing"] = _LayoutScript.schematic_drawing_get
    if _newclass:
        drawing = _swig_property(_LayoutScript.schematic_drawing_get, _LayoutScript.schematic_drawing_set)

    def addToolBarBreak(self, *args):
        return _LayoutScript.schematic_addToolBarBreak(self, *args)

    def toolBarAdd(self, name, buttons):
        return _LayoutScript.schematic_toolBarAdd(self, name, buttons)

    def setShortcut(self, function, key):
        return _LayoutScript.schematic_setShortcut(self, function, key)

    def menuAdd(self, name, entries):
        return _LayoutScript.schematic_menuAdd(self, name, entries)

    def hideToolBar(self, name):
        return _LayoutScript.schematic_hideToolBar(self, name)

    def showToolBar(self, name):
        return _LayoutScript.schematic_showToolBar(self, name)

    def toLayout(self, l):
        return _LayoutScript.schematic_toLayout(self, l)

    def setMenuEnabled(self, name, b):
        return _LayoutScript.schematic_setMenuEnabled(self, name, b)

    def setToolbarEnabled(self, name, b):
        return _LayoutScript.schematic_setToolbarEnabled(self, name, b)

    def setToolbarState(self, arg2):
        return _LayoutScript.schematic_setToolbarState(self, arg2)

    def getToolbarState(self):
        return _LayoutScript.schematic_getToolbarState(self)

    def generateNetList(self, type):
        return _LayoutScript.schematic_generateNetList(self, type)

    def saveNetList(self, filename, type):
        return _LayoutScript.schematic_saveNetList(self, filename, type)
    __swig_destroy__ = _LayoutScript.delete_schematic
    __del__ = lambda self: None
schematic_swigregister = _LayoutScript.schematic_swigregister
schematic_swigregister(schematic)

class schematicDisplay(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, schematicDisplay, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, schematicDisplay, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_setmethods__["firstSheet"] = _LayoutScript.schematicDisplay_firstSheet_set
    __swig_getmethods__["firstSheet"] = _LayoutScript.schematicDisplay_firstSheet_get
    if _newclass:
        firstSheet = _swig_property(_LayoutScript.schematicDisplay_firstSheet_get, _LayoutScript.schematicDisplay_firstSheet_set)
    __swig_setmethods__["currentSheet"] = _LayoutScript.schematicDisplay_currentSheet_set
    __swig_getmethods__["currentSheet"] = _LayoutScript.schematicDisplay_currentSheet_get
    if _newclass:
        currentSheet = _swig_property(_LayoutScript.schematicDisplay_currentSheet_get, _LayoutScript.schematicDisplay_currentSheet_set)

    def scalePlus(self):
        return _LayoutScript.schematicDisplay_scalePlus(self)

    def scaleMinus(self):
        return _LayoutScript.schematicDisplay_scaleMinus(self)

    def scrollLeft(self):
        return _LayoutScript.schematicDisplay_scrollLeft(self)

    def scrollRight(self):
        return _LayoutScript.schematicDisplay_scrollRight(self)

    def scrollUp(self):
        return _LayoutScript.schematicDisplay_scrollUp(self)

    def scrollDown(self):
        return _LayoutScript.schematicDisplay_scrollDown(self)

    def scaleFull(self):
        return _LayoutScript.schematicDisplay_scaleFull(self)

    def openView(self, library, cellName, viewName):
        return _LayoutScript.schematicDisplay_openView(self, library, cellName, viewName)

    def openFile(self, s):
        return _LayoutScript.schematicDisplay_openFile(self, s)

    def saveFile(self, s):
        return _LayoutScript.schematicDisplay_saveFile(self, s)

    def generateNetList(self, type, filename):
        return _LayoutScript.schematicDisplay_generateNetList(self, type, filename)

    def saveNetList(self, filename, type):
        return _LayoutScript.schematicDisplay_saveNetList(self, filename, type)

    def modified(self):
        return _LayoutScript.schematicDisplay_modified(self)

    def setModifyChanged(self):
        return _LayoutScript.schematicDisplay_setModifyChanged(self)

    def setModifyAdded(self):
        return _LayoutScript.schematicDisplay_setModifyAdded(self)

    def setModifySaved(self):
        return _LayoutScript.schematicDisplay_setModifySaved(self)

    def addSheet(self):
        return _LayoutScript.schematicDisplay_addSheet(self)

    def deleteCurrentSheet(self):
        return _LayoutScript.schematicDisplay_deleteCurrentSheet(self)

    def deleteSheet(self, sheet_):
        return _LayoutScript.schematicDisplay_deleteSheet(self, sheet_)

    def setProbeMode(self, d):
        return _LayoutScript.schematicDisplay_setProbeMode(self, d)

    def updateNetlist(self):
        return _LayoutScript.schematicDisplay_updateNetlist(self)

    def setSheet(self, *args):
        return _LayoutScript.schematicDisplay_setSheet(self, *args)

    def findSheet(self, sheetname):
        return _LayoutScript.schematicDisplay_findSheet(self, sheetname)
    __swig_destroy__ = _LayoutScript.delete_schematicDisplay
    __del__ = lambda self: None
schematicDisplay_swigregister = _LayoutScript.schematicDisplay_swigregister
schematicDisplay_swigregister(schematicDisplay)

class sElement(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sElement, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sElement, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def addParameter(self, arg2, arg3):
        return _LayoutScript.sElement_addParameter(self, arg2, arg3)

    def setColor(self, *args):
        return _LayoutScript.sElement_setColor(self, *args)

    def setGlobal(self, arg2):
        return _LayoutScript.sElement_setGlobal(self, arg2)

    def isPortOrBusport(self):
        return _LayoutScript.sElement_isPortOrBusport(self)

    def isArc(self):
        return _LayoutScript.sElement_isArc(self)

    def isCircle(self):
        return _LayoutScript.sElement_isCircle(self)

    def isWire(self):
        return _LayoutScript.sElement_isWire(self)

    def isBus(self):
        return _LayoutScript.sElement_isBus(self)

    def isPort(self):
        return _LayoutScript.sElement_isPort(self)

    def isText(self):
        return _LayoutScript.sElement_isText(self)

    def isRect(self):
        return _LayoutScript.sElement_isRect(self)

    def isGround(self):
        return _LayoutScript.sElement_isGround(self)

    def isPolygon(self):
        return _LayoutScript.sElement_isPolygon(self)

    def isPolyline(self):
        return _LayoutScript.sElement_isPolyline(self)

    def isBusport(self):
        return _LayoutScript.sElement_isBusport(self)

    def isDevice(self):
        return _LayoutScript.sElement_isDevice(self)

    def isWireLabel(self):
        return _LayoutScript.sElement_isWireLabel(self)

    def isGlobal(self):
        return _LayoutScript.sElement_isGlobal(self)

    def getComponent(self):
        return _LayoutScript.sElement_getComponent(self)

    def getPoint(self):
        return _LayoutScript.sElement_getPoint(self)

    def getPoints(self):
        return _LayoutScript.sElement_getPoints(self)

    def getColor(self, arg2):
        return _LayoutScript.sElement_getColor(self, arg2)

    def setParameter(self, arg2, arg3):
        return _LayoutScript.sElement_setParameter(self, arg2, arg3)

    def getParameter(self, arg2):
        return _LayoutScript.sElement_getParameter(self, arg2)

    def getIntParameter(self, arg2):
        return _LayoutScript.sElement_getIntParameter(self, arg2)

    def getDoubleParameter(self, arg2):
        return _LayoutScript.sElement_getDoubleParameter(self, arg2)
    __swig_destroy__ = _LayoutScript.delete_sElement
    __del__ = lambda self: None
sElement_swigregister = _LayoutScript.sElement_swigregister
sElement_swigregister(sElement)

class sElementList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sElementList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sElementList, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_setmethods__["nextElement"] = _LayoutScript.sElementList_nextElement_set
    __swig_getmethods__["nextElement"] = _LayoutScript.sElementList_nextElement_get
    if _newclass:
        nextElement = _swig_property(_LayoutScript.sElementList_nextElement_get, _LayoutScript.sElementList_nextElement_set)
    __swig_setmethods__["thisElement"] = _LayoutScript.sElementList_thisElement_set
    __swig_getmethods__["thisElement"] = _LayoutScript.sElementList_thisElement_get
    if _newclass:
        thisElement = _swig_property(_LayoutScript.sElementList_thisElement_get, _LayoutScript.sElementList_thisElement_set)
    __swig_destroy__ = _LayoutScript.delete_sElementList
    __del__ = lambda self: None
sElementList_swigregister = _LayoutScript.sElementList_swigregister
sElementList_swigregister(sElementList)

class stringList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, stringList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, stringList, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _LayoutScript.new_stringList(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def append(self, d):
        return _LayoutScript.stringList_append(self, d)

    def at(self, i):
        return _LayoutScript.stringList_at(self, i)

    def contains(self, d):
        return _LayoutScript.stringList_contains(self, d)

    def insert(self, pos, value):
        return _LayoutScript.stringList_insert(self, pos, value)

    def indexOf(self, i, index=0):
        return _LayoutScript.stringList_indexOf(self, i, index)

    def removeAll(self, d):
        return _LayoutScript.stringList_removeAll(self, d)

    def removeAt(self, pos):
        return _LayoutScript.stringList_removeAt(self, pos)

    def join(self, arg2):
        return _LayoutScript.stringList_join(self, arg2)

    def prepend(self, arg2):
        return _LayoutScript.stringList_prepend(self, arg2)

    def size(self):
        return _LayoutScript.stringList_size(self)

    def set(self, i, d):
        return _LayoutScript.stringList_set(self, i, d)

    def swap(self, pos1, pos2):
        return _LayoutScript.stringList_swap(self, pos1, pos2)

    def sortList(self, style):
        return _LayoutScript.stringList_sortList(self, style)

    def __eq__(self, p2):
        return _LayoutScript.stringList___eq__(self, p2)

    def __ne__(self, p2):
        return _LayoutScript.stringList___ne__(self, p2)
    __swig_destroy__ = _LayoutScript.delete_stringList
    __del__ = lambda self: None
stringList_swigregister = _LayoutScript.stringList_swigregister
stringList_swigregister(stringList)

class strans(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, strans, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, strans, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _LayoutScript.new_strans(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _LayoutScript.delete_strans
    __del__ = lambda self: None

    def clearMirror_x(self):
        return _LayoutScript.strans_clearMirror_x(self)

    def getAngle(self):
        return _LayoutScript.strans_getAngle(self)

    def getMirror_x(self):
        return _LayoutScript.strans_getMirror_x(self)

    def getScale(self):
        return _LayoutScript.strans_getScale(self)

    def reset(self):
        return _LayoutScript.strans_reset(self)

    def rotate(self, angle):
        return _LayoutScript.strans_rotate(self, angle)

    def scale(self, d):
        return _LayoutScript.strans_scale(self, d)

    def setMirror_x(self):
        return _LayoutScript.strans_setMirror_x(self)

    def toggleMirror_x(self):
        return _LayoutScript.strans_toggleMirror_x(self)
strans_swigregister = _LayoutScript.strans_swigregister
strans_swigregister(strans)

class symbol(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, symbol, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, symbol, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_setmethods__["firstElement"] = _LayoutScript.symbol_firstElement_set
    __swig_getmethods__["firstElement"] = _LayoutScript.symbol_firstElement_get
    if _newclass:
        firstElement = _swig_property(_LayoutScript.symbol_firstElement_get, _LayoutScript.symbol_firstElement_set)

    def addPolyline(self, *args):
        return _LayoutScript.symbol_addPolyline(self, *args)

    def addPolygon(self, *args):
        return _LayoutScript.symbol_addPolygon(self, *args)

    def addArc(self, *args):
        return _LayoutScript.symbol_addArc(self, *args)

    def addText(self, *args):
        return _LayoutScript.symbol_addText(self, *args)

    def addCircle(self, *args):
        return _LayoutScript.symbol_addCircle(self, *args)

    def addRect(self, *args):
        return _LayoutScript.symbol_addRect(self, *args)

    def addPort(self, p, text):
        return _LayoutScript.symbol_addPort(self, p, text)

    def addBusport(self, p, text):
        return _LayoutScript.symbol_addBusport(self, p, text)

    def deleteElement(self, arg2):
        return _LayoutScript.symbol_deleteElement(self, arg2)
    __swig_destroy__ = _LayoutScript.delete_symbol
    __del__ = lambda self: None
symbol_swigregister = _LayoutScript.symbol_swigregister
symbol_swigregister(symbol)

class textDisplay(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, textDisplay, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, textDisplay, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def setLexer(self, lexer):
        return _LayoutScript.textDisplay_setLexer(self, lexer)

    def saveFile(self, fileName):
        return _LayoutScript.textDisplay_saveFile(self, fileName)

    def openFile(self, fileName):
        return _LayoutScript.textDisplay_openFile(self, fileName)

    def setText(self, text):
        return _LayoutScript.textDisplay_setText(self, text)

    def modified(self):
        return _LayoutScript.textDisplay_modified(self)

    def setModifyChanged(self):
        return _LayoutScript.textDisplay_setModifyChanged(self)

    def setModifyAdded(self):
        return _LayoutScript.textDisplay_setModifyAdded(self)

    def setModifySaved(self):
        return _LayoutScript.textDisplay_setModifySaved(self)
    __swig_setmethods__["fileName"] = _LayoutScript.textDisplay_fileName_set
    __swig_getmethods__["fileName"] = _LayoutScript.textDisplay_fileName_get
    if _newclass:
        fileName = _swig_property(_LayoutScript.textDisplay_fileName_get, _LayoutScript.textDisplay_fileName_set)
    __swig_setmethods__["title"] = _LayoutScript.textDisplay_title_set
    __swig_getmethods__["title"] = _LayoutScript.textDisplay_title_get
    if _newclass:
        title = _swig_property(_LayoutScript.textDisplay_title_get, _LayoutScript.textDisplay_title_set)

    def text(self):
        return _LayoutScript.textDisplay_text(self)

    def convert(self, format):
        return _LayoutScript.textDisplay_convert(self, format)
    __swig_destroy__ = _LayoutScript.delete_textDisplay
    __del__ = lambda self: None
textDisplay_swigregister = _LayoutScript.textDisplay_swigregister
textDisplay_swigregister(textDisplay)

class textEdit(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, textEdit, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, textEdit, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_setmethods__["drawing"] = _LayoutScript.textEdit_drawing_set
    __swig_getmethods__["drawing"] = _LayoutScript.textEdit_drawing_get
    if _newclass:
        drawing = _swig_property(_LayoutScript.textEdit_drawing_get, _LayoutScript.textEdit_drawing_set)

    def menuAdd(self, name, entries):
        return _LayoutScript.textEdit_menuAdd(self, name, entries)

    def toolBarAdd(self, name, buttons):
        return _LayoutScript.textEdit_toolBarAdd(self, name, buttons)

    def showToolBar(self, name):
        return _LayoutScript.textEdit_showToolBar(self, name)

    def hideToolBar(self, name):
        return _LayoutScript.textEdit_hideToolBar(self, name)

    def countFiles(self):
        return _LayoutScript.textEdit_countFiles(self)

    def findFile(self, arg2):
        return _LayoutScript.textEdit_findFile(self, arg2)

    def needLayoutEditor(self, newOne=False):
        return _LayoutScript.textEdit_needLayoutEditor(self, newOne)

    def needSchematicEditor(self, newOne=False):
        return _LayoutScript.textEdit_needSchematicEditor(self, newOne)

    def save(self):
        return _LayoutScript.textEdit_save(self)

    def saveAs(self):
        return _LayoutScript.textEdit_saveAs(self)

    def open(self, arg2):
        return _LayoutScript.textEdit_open(self, arg2)

    def setFile(self, i):
        return _LayoutScript.textEdit_setFile(self, i)

    def newFile(self):
        return _LayoutScript.textEdit_newFile(self)

    def newDoc(self):
        return _LayoutScript.textEdit_newDoc(self)

    def closeFile(self):
        return _LayoutScript.textEdit_closeFile(self)

    def setText(self, arg2):
        return _LayoutScript.textEdit_setText(self, arg2)

    def setLexer(self, arg2):
        return _LayoutScript.textEdit_setLexer(self, arg2)

    def reload(self):
        return _LayoutScript.textEdit_reload(self)
    __swig_destroy__ = _LayoutScript.delete_textEdit
    __del__ = lambda self: None
textEdit_swigregister = _LayoutScript.textEdit_swigregister
textEdit_swigregister(textEdit)

class view3dModule(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, view3dModule, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, view3dModule, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def extrudeCurrentCell(self):
        return _LayoutScript.view3dModule_extrudeCurrentCell(self)

    def extrudeCurrentSelection(self):
        return _LayoutScript.view3dModule_extrudeCurrentSelection(self)

    def extrudeCurrentView(self):
        return _LayoutScript.view3dModule_extrudeCurrentView(self)

    def extrude(self, source, bottomLevel, topLevel, destLayer=-1):
        return _LayoutScript.view3dModule_extrude(self, source, bottomLevel, topLevel, destLayer)

    def extrudeCurved(self, source, edge, destLayer=-1):
        return _LayoutScript.view3dModule_extrudeCurved(self, source, edge, destLayer)

    def extrudeSlant(self, source, bottomLevel, topLevel, extensionBottom, extensionTop, destLayer=-1):
        return _LayoutScript.view3dModule_extrudeSlant(self, source, bottomLevel, topLevel, extensionBottom, extensionTop, destLayer)

    def rotate(self, source, angle=360, spiral=0, destLayer=-1):
        return _LayoutScript.view3dModule_rotate(self, source, angle, spiral, destLayer)

    def loadModel(self, source, zLevel, rotation):
        return _LayoutScript.view3dModule_loadModel(self, source, zLevel, rotation)

    def depositReset(self):
        return _LayoutScript.view3dModule_depositReset(self)

    def deposit(self, source, invert, thickness, destLayer=-1, egdeCover=0):
        return _LayoutScript.view3dModule_deposit(self, source, invert, thickness, destLayer, egdeCover)

    def depositFill(self, soucre, invert, toLevel, destLayer=-1):
        return _LayoutScript.view3dModule_depositFill(self, soucre, invert, toLevel, destLayer)

    def depositSetLevel(self, soucre, invert, toLevel):
        return _LayoutScript.view3dModule_depositSetLevel(self, soucre, invert, toLevel)

    def clearModel(self):
        return _LayoutScript.view3dModule_clearModel(self)

    def blockToModel(self, sourceLayer, destLayer, lower, upper):
        return _LayoutScript.view3dModule_blockToModel(self, sourceLayer, destLayer, lower, upper)

    def topRoundedBlockToModel(self, sourceLayer, destLayer, lower, radius, steps):
        return _LayoutScript.view3dModule_topRoundedBlockToModel(self, sourceLayer, destLayer, lower, radius, steps)

    def bottomRoundedBlockToModel(self, sourceLayer, destLayer, upper, radius, steps):
        return _LayoutScript.view3dModule_bottomRoundedBlockToModel(self, sourceLayer, destLayer, upper, radius, steps)

    def slantBlockToModel(self, sourceLayer, destLayer, lower, upper, topextension, bottomextension):
        return _LayoutScript.view3dModule_slantBlockToModel(self, sourceLayer, destLayer, lower, upper, topextension, bottomextension)

    def trigger3dRenderAll(self):
        return _LayoutScript.view3dModule_trigger3dRenderAll(self)

    def trigger3dRenderSelect(self):
        return _LayoutScript.view3dModule_trigger3dRenderSelect(self)

    def trigger3dRenderAuto(self):
        return _LayoutScript.view3dModule_trigger3dRenderAuto(self)

    def trigger3dRenderModel(self):
        return _LayoutScript.view3dModule_trigger3dRenderModel(self)

    def trigger3dRenderView(self):
        return _LayoutScript.view3dModule_trigger3dRenderView(self)

    def syncView(self):
        return _LayoutScript.view3dModule_syncView(self)

    def syncUnits(self):
        return _LayoutScript.view3dModule_syncUnits(self)

    def export3d(self, fn):
        return _LayoutScript.view3dModule_export3d(self, fn)

    def import3d(self, fn):
        return _LayoutScript.view3dModule_import3d(self, fn)
    __swig_destroy__ = _LayoutScript.delete_view3dModule
    __del__ = lambda self: None
view3dModule_swigregister = _LayoutScript.view3dModule_swigregister
view3dModule_swigregister(view3dModule)

# This file is compatible with both classic and new-style classes.


